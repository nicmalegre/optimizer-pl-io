{"version":3,"sources":["components/LinealProgramming/logo.svg","components/Models/Firebase.js","components/Models/index.js","components/LinealProgramming/Configuration/Restrictions/Restriction.js","components/LinealProgramming/Configuration/Restrictions/index.js","components/LinealProgramming/Configuration/Variables/Variable.js","components/LinealProgramming/Configuration/Variables/index.js","components/LinealProgramming/Configuration/index.js","components/LinealProgramming/Processing/Restriccion.js","components/LinealProgramming/Processing/FuncionObj.js","components/LinealProgramming/ReferencesList/index.js","components/LinealProgramming/Processing/index.js","components/LinealProgramming/Presentation/SimplexPresentation.js","components/LinealProgramming/Presentation/GraphicPresentation.js","components/LinealProgramming/Presentation/index.js","components/LinealProgramming/InSteps/index.js","components/NoLinealProgramming/index.js","components/StockProblems/index.js","components/LinealProgramming/index.js","components/Inicio/index.js","components/LinealProgramming/SinglePage/index.js","components/StockProblems/Graph/index.js","components/StockProblems/CantidadEconomicaPedido/index.js","components/StockProblems/CantidadEconomicaPedido/info.js","components/StockProblems/ModeloWilson/index.js","components/StockProblems/ModeloWilson/info.js","components/StockProblems/ModeloStockProteccion/index.js","components/StockProblems/ModeloStockProteccion/info.js","components/StockProblems/ModeloAgotamientoAdmitido/index.js","components/StockProblems/ModeloAgotamientoAdmitido/info.js","components/StockProblems/ModeloTriangular/index.js","components/StockProblems/ModeloTriangular/info.js","components/StockProblems/ModelStockDiscontinuidadDePrecio/index.js","components/StockProblems/ModelStockDiscontinuidadDePrecio/info.js","components/StockProblems/modeloSimpleSinAgotamiento/index.js","components/StockProblems/modeloSimpleSinAgotamiento/info.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FirebaseOptimizer","pushTest","dbUsers","doc","set","then","ok","catch","err","getUserName","user","displayName","getModelsReference","uid","collection","deleteModel","modelId","delete","doSignInWithGoogle","auth","signInWithPopup","googleProvider","doSignOut","signOut","app","apps","length","initializeApp","console","log","this","logged","firestore","onAuthStateChanged","GoogleAuthProvider","ModalModels","props","saveNewModel","descModel","state","firebase","model","setState","saveMenu","signIn","logOut","info","toggle","handleClose","loadModel","setModel","id","openSaveModel","handleDesc","e","target","value","loadExampleModel","variables","xi","descripcion","coeficiente","restricciones","ri","coeficientes","eq","derecha","integer","method","objective","loading","models","loadig","authSubscription","dbSubscribe","onSnapshot","snapshot","forEach","push","data","description","openSaveModelMenu","Col","Row","Input","required","valid","onChange","placeholder","className","sm","Button","color","outline","onClick","closeSaveModelMenu","loadExample","loginButton","tableModels","Table","responsive","striped","map","key","size","saveModel","modelTableWSpinner","Spinner","type","modalBody","modalFooter","Modal","isOpen","open","ModalHeader","ModalBody","ModalFooter","React","Component","Restriction","restriccion","InputGroup","InputGroupAddon","addonType","InputGroupText","name","aria-label","aria-describedby","handleChange","UncontrolledPopover","flip","trigger","placement","PopoverBody","Restrictions","handleChangeRes","desc","splice","restri","index","deleteRes","handleRestrictions","handleNewRes","filter","element","Variable","variable","handleChanges","Variables","handleChangesVar","vari","deleteVar","handleVariables","Configuration","handleRestricciones","showModels","faltaDescrip","status","variablesDescriptionsMin","va","restriccionesDescriptionsMin","re","lastStep","buttonsMethods","ButtonGroup","handleMethod","active","buttonsOptType","handleObjective","Container","Card","CardHeader","CardBody","toggleInteger","PopoverHeader","CardTitle","Alert","Restriccion","cantVariables","diferencia","thisEq","botoneraMaxMin","handleCoefRes","disabled","inputsRestriccions","indx","Fragment","UncontrolledTooltip","FuncionObj","variablesToFunction","handleCoefVar","toUpperCase","ReferencesList","listDescriptionsVarItems","array","item","ListGroupItem","Badge","listDescriptionsResItems","co","references","Collapse","ListGroup","Processing","event","parseInt","Number","faltaCoe","verifQty","every","veriResQty","varsOperativas","restriccionesInput","SimplexPresentation","tablaDeRecursosFoot","cantUsoVar","variableId","tableBody","mapperAnalisisTable","result","tableResult","resultSetArray","Object","entries","solutionSet","matrix","_tableau","indexByCol","varIndexByCol","variablesList","variablesPerIndex","variablesRealesList","el","isSlack","keys","includes","evaluation","slice","col","indCol","Math","abs","cardsVariablesRender","CardText","CardFooter","details","elementosTabAnalisis","resultAnalisisCard","resultDetalleCard","randomColor","require","GraphicPresentation","updateState","elem","coefToValueZ","getCoeficientesToEv","referencias","getColorList","getLinesAndExpressions","lines","expresiones","highestValueX","highestValueY","getPoints","points","convexPoints","optimMark","getOptimPoint","lineFunctional","getObjectiveFunctionLine","getTableResult","concat","coef","x","y","getFrac","real","Fraction","pow","toFixed","toString","arrayDeRestriccionesConLosDosCoef","max","apply","xNum","isInteger","yNum","Expression","multiply","expressRestri","add","restriEquation","Equation","tipo","yEqu","solveFor","xEqu","y0","relation","valY","valX","title","hue","luminosity","solSet","P","optimPoint","xMax","yMax","xPoint","yPoint","xExp","subtract","yExp","expFunObj","xVal","error","verifyPoint","point","verifyPointInPoints","verifyPointInRestrictions","some","pointL","calIzq","getPointFromExpXExpY","expX","expY","xRes","yRes","getPointFromExpCExpY","expC","expResultY","expResultX","getPointFromExpCExpX","getPointFromTwoExp","exp1","exp2","getPointFromTwoExpC","exp","pointX","getPointAxFromExpCenX","pointY","getPointAxFromExpCenY","getPointAxFromExpX","getPointAxFromExpY","calcAng","p","atan2","PI","possiblePoints","pointsList","sort","a","b","orderedPoints","minAngle","reduce","min","indNewPoint","findIndex","getAreaPointsForConvex","shift","calcResult","slacksTitles","calcSlacksValue","hidePoint","showPoint","mapperAreaSeries","opacity","mapperLinesSeries","areaGraph","graph","prevProps","onMouseLeave","pointer","width","height","fill","stroke","style","strokeWidth","strokeStyle","onValueMouseOver","onValueMouseOut","orientation","items","Presentation","validateCoeficientes","varsOperatives","restOperatives","calculateResults","datosApp","optimize","opType","constraints","ints","newVari","res","convertAppToModelForSolverPrimal","solver","Solve","futureProps","printResults","existenCeros","feasible","current","bounded","pill","InSteps","handleResult","step","barProg","finishButtonClick","window","print","modelsOpen","steps","stepName","component","stepProps","fluid","xs","md","progressbar","headerTextCenter","validate","previousButtonText","nextButtonText","nextButtonClasses","finishButtonText","NoLinealProgramming","Jumbotron","to","StockProblems","marginLeft","fontSize","LinealProgramming","Inicio","tag","href","src","SinglePage","changes","logo","alt","Graph","yProm","t","sr","puntoDeReorden","line","linePromedio","linePuntoDeReorden","margin","CantidadEconomicaPedido","handleInputChange","controlarCambio","mostrarResultados","demanda","costoDePreparacion","costoDeAlmacenamiento","tiempoDeEntrega","longitudCiclo","cantidadEconomica","combinacion2","combinacion3","control1","caso","control2","control3","combinacion5","combinacion6","combinacion7","control4","control5","control6","control7","calcularInventarioOptimoEcuacionSimple","calcularDemandaEcuacionSimple","cantidadEconomic","calcularInventarioOptimo","calcularLongitud","calcularCostoAlmacenamiento","calcularDemanda","calcularCostoPorPedido","setTimeout","calcularCostoInventario","calcularPuntoDeReorden","incompleto","politica","unidadCostoDeAlmacenamiento","unidadesAlmacenamiento","unidadesDemanda","inputUpdated","TCU","prevState","sqrt","promedioInventario","tiempoEfectivoDeEntrega","trunc","controlarPolitica","body","inverse","marginTop","padding","backgroundColor","borderColor","dark","justifyContent","marginBottom","ModeloWilson","costoDeProducto","calcularLoteOptimo","calcularTiempoEntrePedidos","calcularCostoPreparacionTotal","calcularCostoProductoTotal","calcularCostoAlmacenamientoTotal","calcularCTE","costoDePreparacionTotal","costoDeAlmacenamientoTotal","costoDeProductoTotal","loteOptimo","tiempoEntrePedidos","CTE","bD","raiz2TDKC1","Provider","Node","formula","ModeloStockProteccion","costoDeAdquisicion","CostoUnitarioDeAlmacenamiento","CostoDeUnaOrden","T","LeadTime","StockDeProteccion","calcularTamañoDelLote","calcularIntervaloDeUnCiclo","calcularCostoTotalEsperado","spTC1","spb","ModeloAgotamientoAdmitido","CostoDeEscasez","calcularStockRealAlmacenado","stockAlmacenado","primerRaiz","segundaRaiz","raizc1c2","display","ModeloTriangular","VelocidadDeProduccion","numerador","denominador","demandaUnitaria","costoTotalDePreparacion","costoTotalDeAlmacenamiento","modelStockSimple","precioC1","precioC2","limite","calcularCostoInventarioMenorIgual","calcularCostoInventarioMayor","calcularQ","tamañoPedido","punto","ym","TCL","TCU1","TCU2","c","valor1","valor2","ModeloSimpleSinAgotamiento","infoModeloSimpleSinAgotamiento","NoLinealProgrammingPage","Index","App","exact","path","infoCantidadEconomicaPedido","infoModeloWilson","infoModeloStockProteccion","infoModeloAgotamientoAdmitido","infoModeloTriangular","ModelStockDiscontinuidadDePrecio","infoModelStockDiscontinuidadDePrecio","Boolean","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.040d830c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import app  from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyABNWz15l41jDB9CgrceCS-E7tJvI4qETQ\",\r\n    authDomain: \"optimizer-pl-io.firebaseapp.com\",\r\n    databaseURL: \"https://optimizer-pl-io.firebaseio.com\",\r\n    projectId: \"optimizer-pl-io\",\r\n    storageBucket: \"optimizer-pl-io.appspot.com\",\r\n    messagingSenderId: \"9328532745\",\r\n    appId: \"1:9328532745:web:a0869d1580b25836\"\r\n  };\r\n\r\n  // Initialize Firebase\r\n  export default class FirebaseOptimizer {\r\n    constructor() {\r\n      if (!app.apps.length ) {app.initializeApp(firebaseConfig)}\r\n      console.log('Initializando')\r\n      this.auth = app.auth();\r\n      this.logged = false;\r\n      this.user = {};\r\n      this.dbUsers = app.firestore().collection('users'); \r\n      this.auth.onAuthStateChanged( user => { if (user) {this.user=user; this.logged = true}else{this.user={}; this.logged=false}})\r\n      this.googleProvider = new app.auth.GoogleAuthProvider();\r\n    }\r\n\r\n    \r\n  \r\n    // *** Auth API ***\r\n  \r\n    // doCreateUserWithEmailAndPassword = (email, password) =>\r\n    //   this.auth.createUserWithEmailAndPassword(email, password);\r\n  \r\n    // doSignInWithEmailAndPassword = (email, password) =>\r\n    //   this.auth.signInWithEmailAndPassword(email, password);\r\n    \r\n    pushTest = () => this.dbUsers.doc('test').set({'setTest':'Es un Test' }).then(ok=>ok).catch(err=>err)\r\n\r\n    getUserName = () => this.user.displayName;\r\n\r\n    getModelsReference = () => this.dbUsers.doc(this.user.uid).collection('models');\r\n\r\n    deleteModel = modelId => this.dbUsers.doc(this.user.uid).collection('models').doc(modelId).delete().then(ok=>ok).catch(err=>err)\r\n    \r\n    doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider)\r\n  \r\n    doSignOut = () => this.auth.signOut()\r\n\r\n  \r\n  }\r\n","import React from \"react\";\r\nimport FirebaseOptimizer from './Firebase';\r\nimport { Input, Button, Row, Col, Modal, ModalBody, ModalHeader, ModalFooter, Table, Spinner } from \"reactstrap\";\r\n  \r\n\r\nexport default class ModalModels extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.firebase = new FirebaseOptimizer();\r\n    this.state = { loading:false,logged:false, user:'', descModel:'',saveMenu:false , models:[]};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({loadig:true})\r\n    this.authSubscription = this.firebase.auth.onAuthStateChanged( user => {\r\n      if( user ){\r\n        console.log('Logged');\r\n        this.setState({ logged: true, user:user.displayName });\r\n        this.dbSubscribe = this.firebase.getModelsReference().onSnapshot(snapshot => {\r\n          let models = [];\r\n    \r\n          snapshot.forEach(doc =>\r\n            models.push({ model:doc.data().model, description: doc.id }),\r\n          );\r\n          console.log(models);\r\n          this.setState({\r\n            models,\r\n            loading: false,\r\n          });\r\n        });\r\n        \r\n      }else{\r\n        this.dbSubscribe && this.dbSubscribe();\r\n        console.log('No Logged');\r\n        this.setState({ logged: false, user:'', models:[] });\r\n      }\r\n      \r\n    });\r\n      \r\n    \r\n   \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.authSubscription();\r\n    this.dbSubscribe && this.dbSubscribe();\r\n    this.setState({ logged:false, user:'', models:[] });\r\n  }\r\n\r\n  saveNewModel = () => {\r\n    let { descModel } = this.state;\r\n    if (descModel) {\r\n      this.firebase.getModelsReference().doc(descModel).set({'model':this.props.model})\r\n      .then(ok => this.setState({ descModel:'', saveMenu:false}))\r\n      .catch(err=> console.log(err));\r\n    }\r\n  }\r\n\r\n  signIn = () => this.firebase.doSignInWithGoogle().then( user => console.log('Signin'))\r\n\r\n  logOut = () => this.firebase.doSignOut().then( info => console.log('SignOut'))\r\n\r\n  toggle = () => this.props.handleClose()\r\n\r\n  loadModel = model => { this.props.setModel(model); this.toggle(); }\r\n\r\n  deleteModel = id => this.firebase.deleteModel(id)\r\n \r\n  openSaveModel = () => this.setState({saveMenu:!this.state.saveMenu})\r\n\r\n  handleDesc = (e) => this.setState({descModel:e.target.value})\r\n\r\n  loadExampleModel = () => {\r\n    let variables = [\r\n      { xi: 0, descripcion: \"Pantalones (u/día)\", coeficiente: 3 },\r\n      { xi: 1, descripcion: \"Camisas (u/día)\", coeficiente: 1 }\r\n    ];\r\n    let restricciones = [\r\n      { ri: 0, descripcion: \"Mano de obra (hs/día)\", coeficientes: [1, 1], eq: \"<=\", derecha: 8 },\r\n      { ri: 1, descripcion: \"Minimo de Produccion (u/día)\", coeficientes: [1, 6], eq: \">=\", derecha: 14 }\r\n    ];\r\n    let model = {\r\n      variables,\r\n      restricciones, \r\n      integer: false, \r\n      method: \"graph\", \r\n      objective: \"max\"\r\n    }\r\n    this.loadModel(model)\r\n  };\r\n  \r\n\r\n  render() {\r\n    let { logged ,user, descModel, saveMenu, models} = this.state;\r\n    \r\n    let openSaveModelMenu =  \r\n      <Col>\r\n        <Row><Input required valid={descModel.length!==0} onChange={this.handleDesc} value={descModel} placeholder='Descripcion del Modelo'/></Row>\r\n        <Row className='mt-2'><Col sm={8} className='text-center'><Button color=\"success\" outline onClick={this.saveNewModel}>Guardar Modelo Actual</Button></Col>\r\n      <Col sm={4} className='text-center'><Button color=\"danger\" outline onClick={this.openSaveModel}>Cancelar</Button></Col></Row></Col>\r\n    \r\n    let closeSaveModelMenu =\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} className='text-center'><Button color=\"success\" outline onClick={this.openSaveModel}>Nuevo Modelo</Button></Col>\r\n          <Col sm={6} className='text-center'><Button color=\"primary\" outline onClick={this.logOut}>Cerrar Session</Button></Col>\r\n        </Row>\r\n      </Col>    \r\n    \r\n    let loadExample = <Col sm={12} className='text-center'><Button color=\"warning\" outline onClick={this.loadExampleModel}>Cargar Modelo de Ejemplo</Button></Col>\r\n    \r\n    let loginButton = <Col sm={12} className='text-center'><Button color=\"primary\" outline onClick={this.signIn}>Iniciar Session Con Google</Button></Col>\r\n  \r\n    let tableModels = \r\n      <Col sm={12}>\r\n        <Table responsive striped>\r\n          <thead><tr><th>Descripcion</th><th></th><th></th></tr></thead>\r\n          <tbody>{models.map( model => <tr key={'M-M-'+model.description}><td>{model.description}</td><td className='btnSize'><Button size='sm' onClick={e => this.loadModel(model.model)}color='success'>Cargar</Button></td><td className='btnSize'><Button size='sm' onClick={e => this.deleteModel(model.description)} color='danger'>Eliminar</Button></td></tr>)}</tbody>\r\n        </Table>\r\n      </Col>\r\n\r\n    let saveModel = saveMenu ? openSaveModelMenu : closeSaveModelMenu;\r\n\r\n    let modelTableWSpinner = models.length ? tableModels : <Col className='text-center' sm={12}><Spinner type='grow' color='black'/></Col>\r\n    \r\n    let modalBody = logged ? modelTableWSpinner : loadExample \r\n    \r\n    let modalFooter = logged ? saveModel : loginButton\r\n    \r\n    return (\r\n      <div>\r\n        <Modal isOpen={this.props.open} toggle={this.toggle} className={this.props.className}>\r\n          <ModalHeader toggle={this.toggle}>Modelos {logged && ' de '+user}</ModalHeader>\r\n          <ModalBody><Row className='mx-auto w-100'>{ modalBody }</Row></ModalBody>\r\n          <ModalFooter><Row className='mx-auto w-100'>{ modalFooter }</Row></ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,UncontrolledPopover,PopoverBody} from 'reactstrap';\r\n\r\nconst Restriction = props => {\r\n    let {ri,descripcion} = props.restriccion\r\n    \r\n    const handleChange = e => props.handleChange(ri,e.target.value)\r\n    return(\r\n        <InputGroup className=\"mt-1\" id={\"TTR\" + ri} key={\"RTD\" + ri}>\r\n\r\n        <InputGroupAddon addonType=\"prepend\">\r\n          <InputGroupText name=\"ri\" id=\"restriccion\">{\"R\" + ri}</InputGroupText>\r\n        </InputGroupAddon>\r\n\r\n        <Input\r\n          name={ri}\r\n          placeholder=\"Descripcion de la Restriccion\"\r\n          aria-label=\"Descripcion\"\r\n          aria-describedby=\"restriccion\"\r\n          onChange={handleChange}\r\n          value={descripcion}/>\r\n\r\n        <UncontrolledPopover flip={false} trigger=\"focus hover\" placement=\"auto\" target={\"TTR\" + ri}>\r\n          <PopoverBody>Aquí debes ingresar qué representa la restricción en el modelo.</PopoverBody>\r\n        </UncontrolledPopover>\r\n\r\n      </InputGroup>)\r\n    \r\n}\r\n\r\nexport default Restriction;","import React from 'react';\r\nimport Restriction from './Restriction';\r\n\r\nconst Restrictions = props => {\r\n    \r\n    let {restricciones} = props;\r\n    \r\n    const deleteRes = ri => {\r\n        restricciones.splice(ri, 1)\r\n        restricciones.forEach( (restri,index) => restri.ri = index )\r\n    }\r\n    //Función que se encarga de manejar las modificaciones de restricciones.\r\n    const handleChangeRes = (ri,desc) => {\r\n        //Si el cambio es dejarla vacia entonces eliminamos la restriccion Sino, Almacenamos el valor\r\n        if (desc === '') { deleteRes(ri) }else{ restricciones[ri].descripcion = desc }\r\n        //pedimos al padre que almacene los cambios\r\n        props.handleRestrictions(restricciones);\r\n        //Llamamos a generar si corresponde nueva restriccion\r\n        handleNewRes();\r\n    };\r\n    //Función que se encarga de Añadir una restriccion si es necesario.\r\n    const handleNewRes = () => {\r\n        //Agregamos Tope de Restricciones\r\n        if(restricciones.length < 30 ){\r\n        //Contador de Rescciones sin descripciones.\r\n        let counterWitheRes = restricciones.filter(element => element.descripcion.length === 0).length;\r\n        //Si el contador de restricciones vacias es igual a 0 entonces agregamos una restriccion mas.\r\n            if (counterWitheRes === 0) {\r\n            restricciones.push({\r\n                ri: restricciones.length,\r\n                descripcion: \"\",\r\n                coeficientes: [],\r\n                eq: \">=\",\r\n                derecha: \"\"\r\n            });\r\n            props.handleRestrictions(restricciones);\r\n            }\r\n        }\r\n        };\r\n    handleNewRes();\r\n    return restricciones.map( restri => <Restriction key={'RES-'+restri.ri} handleChange={handleChangeRes} restriccion={restri}/>)\r\n}\r\n\r\nexport default Restrictions;","import React from 'react';\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,UncontrolledPopover,PopoverBody} from 'reactstrap';\r\n\r\nconst Variable = props => {\r\n    let {xi,descripcion} = props.variable\r\n    const handleChange = e => props.handleChanges(xi,e.target.value) \r\n    return(\r\n        <InputGroup className=\"mt-1\" id={\"XTT\" + xi} key={\"VTD\" + xi}>\r\n        <InputGroupAddon addonType=\"prepend\">\r\n          <InputGroupText name=\"xi\" id=\"variable\">\r\n            {\"X\" + xi}\r\n          </InputGroupText>\r\n        </InputGroupAddon>\r\n        <Input\r\n          name={xi}\r\n          placeholder=\"Descripcion de la Variable\"\r\n          aria-label=\"Descripcion\"\r\n          aria-describedby=\"variable\"\r\n          onChange={handleChange}\r\n          value={descripcion}\r\n        />\r\n        <UncontrolledPopover flip={false} trigger=\"focus hover\" placement=\"auto\" target={\"XTT\" + xi}>\r\n          <PopoverBody>Aquí debes ingresar qué representa la variable en el modelo.</PopoverBody>\r\n        </UncontrolledPopover>\r\n      </InputGroup>)\r\n    \r\n}\r\n\r\nexport default Variable;","import React from 'react';\r\nimport Variable from './Variable';\r\n\r\nconst Variables = props => {\r\n    let { variables,method } = props\r\n        //Función que se encarga de manejar las modificaciones en las variables.\r\n        const deleteVar = xi => {\r\n            if (variables.length > 2){\r\n                variables.splice(xi, 1)\r\n                variables.forEach( (vari,index) => vari.xi = index )\r\n            }else{\r\n                variables[xi].descripcion = ''\r\n            }\r\n        }\r\n        //Función que se encarga de manejar las modificaciones de restricciones.\r\n        const handleChangesVar = (xi,desc) => {\r\n            //Si el cambio es dejarla vacia entonces eliminamos la restriccion Sino, Almacenamos el valor\r\n            if (desc === '') { deleteVar(xi) }else{ variables[xi].descripcion = desc }\r\n            //pedimos al padre que almacene los cambios\r\n            props.handleVariables(variables);\r\n        };\r\n        //Función que se encarga de Añadir una Variable si es necesario.\r\n    const handleNewsVar = () => {\r\n        if (method === \"simplex\") {\r\n            if( variables.length < 20 ){\r\n                //Si el metodo es Simplex, se permite agregar más de dos variables.\r\n                let counterWitheVar = variables.filter(element => element.descripcion.length === 0).length;\r\n                //Si la cantidad de Variables Libres es igual a 0 se agrega una más.\r\n                if (counterWitheVar === 0) {\r\n                variables.push({ xi: variables.length, descripcion: \"\", coeficiente: \"\" });\r\n                props.handleVariables(variables);\r\n                }\r\n            }\r\n        } else {\r\n        //Si no lo es, aseguramos que existan solo dos, entonces eliminamos lo que está de más.\r\n            if (variables.length > 2) {\r\n                variables.splice(2);\r\n                props.handleVariables(variables);\r\n            }\r\n        }\r\n    };\r\n    handleNewsVar();\r\n    return variables.map( variable => <Variable key={'VAR-'+variable.xi} handleChanges={handleChangesVar} variable={variable}/> )\r\n}\r\n\r\nexport default Variables;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle } from \"reactstrap\";\r\nimport { Alert, UncontrolledPopover, PopoverBody, PopoverHeader } from \"reactstrap\";\r\nimport Restrictions from \"./Restrictions\";\r\nimport Variables from \"./Variables\";\r\n\r\nclass Configuration extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { faltaDescrip: \"\" };\r\n  }\r\n\r\n  //Función que permite validar si se ingresaron todos los cambios correspondientes en la etapa\r\n  isValidated() {\r\n    let { variables, restricciones } = this.props.status;\r\n    let variablesDescriptionsMin = variables.filter(va => va.descripcion !== \"\");\r\n    let restriccionesDescriptionsMin = restricciones.filter(re => re.descripcion !== \"\");\r\n    if ((variablesDescriptionsMin.length > 1) & (restriccionesDescriptionsMin.length > 0)) {\r\n      this.props.lastStep(1);\r\n      this.setState({ faltaDescrip: \"\" });\r\n      return true;\r\n    } else if (variablesDescriptionsMin.length < 2) {\r\n      this.setState({ faltaDescrip: \"Se necesitan como mínimo dos variables\" });\r\n    } else if (restriccionesDescriptionsMin.length < 1) {\r\n      this.setState({ faltaDescrip: \"Se necesita como mínimo una restricción\" });\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  //Funcion que se encarga de traspasar los cambios al padre\r\n  handleRestrictions = restricciones => this.props.handleRestricciones(restricciones)\r\n  \r\n  //Funcion que se encarga de traspasar los cambios al padre\r\n  handleVariables = variables => this.props.handleVariables(variables)\r\n  \r\n  //Modelos\r\n  showModels = () => this.props.showModels()\r\n\r\n  render() {\r\n    //Obtenemos de las props, las varaibles y restricciones.\r\n    let {variables,restricciones,method } = this.props.status;\r\n\r\n    let buttonsMethods = (\r\n      <ButtonGroup id=\"ButtUtil\">\r\n        <Button\r\n          outline\r\n          onClick={ () => this.props.handleMethod(\"graph\")}\r\n          active={this.props.status.method === \"graph\"}\r\n          color=\"primary\">\r\n          Gráfico\r\n        </Button>\r\n        <Button\r\n          outline\r\n          onClick={ () => this.props.handleMethod(\"simplex\")}\r\n          active={this.props.status.method === \"simplex\"}\r\n          color=\"primary\">\r\n          Simplex\r\n        </Button>\r\n      </ButtonGroup>\r\n    );\r\n    let buttonsOptType = (\r\n      <ButtonGroup>\r\n        <Button\r\n          outline\r\n          onClick={() => this.props.handleObjective(\"max\")}\r\n          active={this.props.status.objective === \"max\"}\r\n          color=\"primary\"\r\n        >\r\n          Maximizar\r\n        </Button>\r\n        <Button\r\n          outline\r\n          onClick={() => this.props.handleObjective(\"min\")}\r\n          active={this.props.status.objective === \"min\"}\r\n          color=\"primary\"\r\n        >\r\n          Minimizar\r\n        </Button>\r\n      </ButtonGroup>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <h3>Comenzamos configurando nuestro modelo</h3>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <UncontrolledPopover flip={false} trigger=\"hover\" placement=\"top\" target=\"CardInteger\">\r\n                <PopoverBody>Esta función activa o desactiva la Programacion Lineal Entera.</PopoverBody>\r\n              </UncontrolledPopover>\r\n              <Card outline color=\"secondary\" id=\"CardInteger\" className=\"mt-2 mx-auto\">\r\n                <CardHeader>Programación entera</CardHeader>\r\n                <CardBody>\r\n                  <Button\r\n                    outline\r\n                    color={this.props.status.integer ? \"success\" : \"danger\"}\r\n                    onClick={() => this.props.toggleInteger()}\r\n                  >\r\n                    {this.props.status.integer ? \"Activa\" : \"Inactiva\"}\r\n                  </Button>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <UncontrolledPopover flip={false} trigger=\"hover\" placement=\"top\" target=\"CardModel\">\r\n                <PopoverBody>\r\n                  En esta seccion usted podra almacenar en la base de datos los modelos deseados, realizando el registro con su cuenta de Google.\r\n                </PopoverBody>\r\n              </UncontrolledPopover>\r\n              <Card outline color=\"secondary\" id=\"CardModel\" className=\"mt-2 mx-auto\">\r\n                <CardHeader>Gestion de Modelos</CardHeader>\r\n                <CardBody>\r\n                  <Button color=\"warning\" outline onClick={this.showModels}>\r\n                    Modelos\r\n                  </Button>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <UncontrolledPopover flip={false} trigger=\"hover\" placement=\"top\" target=\"CardUtil\">\r\n                <PopoverBody>\r\n                  Aquí debes seleccionar el método de cálculo y visualización de los resultados.\r\n                </PopoverBody>\r\n              </UncontrolledPopover>\r\n              <Card outline color=\"secondary\" id=\"CardUtil\" className=\"mt-3 mx-auto\">\r\n                <CardHeader>Método a utilizar</CardHeader>\r\n                <CardBody>{buttonsMethods}</CardBody>\r\n              </Card>\r\n            </Col>\r\n\r\n            <Col>\r\n              <UncontrolledPopover flip={false} trigger=\"hover\" placement=\"top\" target=\"CardOpt\">\r\n                <PopoverBody>\r\n                  Y aquí el tipo de optimizacion que deseas realizar: si deseas maximizar o minimizar la\r\n                  función.\r\n                </PopoverBody>\r\n              </UncontrolledPopover>\r\n              <Card outline color=\"secondary\" id=\"CardOpt\" className=\"mt-3 mx-auto\">\r\n                <CardHeader>Tipo de optimización</CardHeader>\r\n                <CardBody>{buttonsOptType}</CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <UncontrolledPopover flip={false} trigger=\"hover\" placement=\"top\" target=\"CardVariables\">\r\n              <PopoverHeader>Variables</PopoverHeader>\r\n              <PopoverBody>\r\n                Aquí debes ingresar las variables que formarán parte del modelo, las mismas son de carga\r\n                dinámica.\r\n              </PopoverBody>\r\n            </UncontrolledPopover>\r\n            <Card outline color=\"secondary\" id=\"CardVariables\" className=\"w-100 mt-3 mx-auto\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-left\">\r\n                  <h4>Variables</h4>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody><Variables method={method} handleVariables={this.handleVariables} variables={variables}/></CardBody>\r\n            </Card>\r\n          </Row>\r\n          <Row>\r\n            <UncontrolledPopover flip={false} trigger=\"hover\" placement=\"top\" target=\"CardRestri\">\r\n              <PopoverHeader>Restricciones</PopoverHeader>\r\n              <PopoverBody>\r\n                Aquí debes ingresar las restricciones que formarán parte del modelo, éstas también son de\r\n                carga dinámica.\r\n              </PopoverBody>\r\n            </UncontrolledPopover>\r\n            <Card outline color=\"secondary\" id=\"CardRestri\" className=\"w-100 mt-3 mx-auto\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-left\">\r\n                  <h4>Restricciones</h4>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody><Restrictions handleRestrictions={this.handleRestrictions} restricciones={restricciones}/></CardBody>\r\n            </Card>\r\n          </Row>\r\n          {this.state.faltaDescrip !== \"\" && (\r\n            <Row className=\"mt-3\">\r\n              <Alert className=\"mx-auto\" color=\"danger\">\r\n                {this.state.faltaDescrip}\r\n              </Alert>\r\n            </Row>\r\n          )}\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Configuration;\r\n","import React from 'react';\r\nimport {Button,InputGroupText,Card,CardBody,CardHeader,CardTitle ,InputGroup, Input,InputGroupAddon, ButtonGroup,UncontrolledTooltip} from 'reactstrap';\r\n\r\nconst Restriccion = props => {\r\n    let {coeficientes} = props.restriccion;\r\n    //Verificamos la cantidad de coeficientes dependiendo de la cantidad de variables.\r\n    if (coeficientes.length !== props.cantVariables) {\r\n        //Diferencia de entre las variables y los coeficientes de las restricciones. \r\n        let diferencia = props.cantVariables - coeficientes.length;\r\n        if ( diferencia > 0 ) {\r\n            for (let index = 0; index < diferencia; index++) {\r\n                coeficientes.push('')       \r\n            }\r\n        }else {\r\n            coeficientes.splice(props.cantVariables)\r\n        }\r\n    }\r\n\r\n    let thisEq = props.restriccion.eq;\r\n    let botoneraMaxMin = (<ButtonGroup className='mx-1' key={'Eq'+props.restriccion.ri}>\r\n                                    <Button key={'B<s'+props.restriccion.ri} name='eq' \r\n                                        onClick={e => {props.handleCoefRes(e,props.restriccion.ri);thisEq='<='}} \r\n                                        color={thisEq === '<=' ? \"primary\":\"secondary\" } \r\n                                        value='<='>{'<='}</Button>\r\n                                    <Button key={'B='+props.restriccion.ri} name='eq' \r\n                                        disabled \r\n                                        onClick={e => {props.handleCoefRes(e,props.restriccion.ri);thisEq='='}} \r\n                                        color={thisEq === '=' ? \"primary\":\"secondary\"} \r\n                                        value='='>{'='}</Button>\r\n                                    <Button key={'B>'+props.restriccion.ri} name='eq' \r\n                                        onClick={e => {props.handleCoefRes(e,props.restriccion.ri);thisEq='>='}} \r\n                                        color={thisEq === '>=' ? \"primary\":\"secondary\"} \r\n                                        value='>='>{'>='}</Button>\r\n                                </ButtonGroup>);\r\n    let inputsRestriccions = coeficientes\r\n    .map((coeficiente,indx) => \r\n        <React.Fragment key={'divCi'+indx}>\r\n            <Input key={'Ci'+props.restriccion.ri+'r'+indx}\r\n                type=\"number\"\r\n                name={indx}\r\n                placeholder=\"Coefiente\"\r\n                className=\"InputCoeficiente\"\r\n                onChange={e => {props.handleCoefRes(e,props.restriccion.ri)}}\r\n                value={coeficiente}\r\n                />\r\n            <InputGroupAddon key={'IADD'+props.restriccion.ri+'r'+indx} addonType='append'>\r\n                <InputGroupText key={'r'+props.restriccion.ri+'r'+indx}>{'X'+indx}</InputGroupText>\r\n            </InputGroupAddon>\r\n            {indx < coeficientes.length-1 && <InputGroupText key={'+'+props.restriccion.ri+'r'+indx}>+</InputGroupText>}\r\n        </React.Fragment>\r\n            \r\n    )\r\n\r\n    return(\r\n        <Card key={'CR'+props.restriccion.ri} id={'CR'+props.restriccion.ri}>\r\n            <UncontrolledTooltip flip={false} key={'TTCR'+props.restriccion.ri} placement='auto' target={'CR'+props.restriccion.ri}>\r\n            {'Aqui debes ingresar los coeficiente de '+props.restriccion.descripcion}\r\n            </UncontrolledTooltip>\r\n            <CardHeader className=\"p-0 m-0\"><CardTitle>{'R'+props.restriccion.ri+':'+props.restriccion.descripcion}</CardTitle></CardHeader>\r\n            <CardBody className=\"p-0 my-1 mx-auto\">\r\n                <InputGroup key={'RT'+props.restriccion.ri}>\r\n                    {inputsRestriccions}\r\n                    {botoneraMaxMin}\r\n                    <Input key={'C'+props.restriccion.ri+'r'+coeficientes.length}\r\n                            type=\"number\"\r\n                            name={'derecha'}\r\n                            placeholder=\"Coe\"\r\n                            className=\"InputCoeficiente\"\r\n                            aria-label=\"Coe\"\r\n                            aria-describedby=\"restriccion\"\r\n                            onChange={e => {props.handleCoefRes(e,props.restriccion.ri)}}\r\n                            value={props.restriccion.derecha}/>\r\n                </InputGroup>\r\n            </CardBody>\r\n        </Card>)\r\n    \r\n}\r\n\r\nexport default Restriccion;","import React from 'react';\r\nimport {InputGroup, InputGroupAddon, InputGroupText, Input, UncontrolledTooltip } from 'reactstrap'\r\n\r\n\r\nconst FuncionObj = props => {\r\n    let {variables} = props\r\n    let variablesToFunction = variables\r\n    .filter(vari => vari.descripcion !== '')\r\n    .map( (vari,index) => \r\n        <React.Fragment key={'divIF'+index}>\r\n            <UncontrolledTooltip flip={false} key={'TTV'+index} placement='auto' target={'IF'+index}>\r\n            {'Aqui debes ingresar el coeficiente de '+vari.descripcion}\r\n            </UncontrolledTooltip>\r\n            <Input key={'IF'+index}\r\n                    id={'IF'+index}\r\n                        type='number'\r\n                        name={vari.xi}\r\n                        placeholder=\"Coef\"\r\n                        className=\"InputCoeficiente\"\r\n                        aria-label=\"Coeficiente\"\r\n                        aria-describedby=\"coe\"\r\n                        onChange={ e => props.handleCoefVar(e)}\r\n                        value={vari.coeficiente}\r\n                        />\r\n            <InputGroupAddon key={'ADDIF'+index} addonType=\"append\">\r\n                <InputGroupText key={'IFD'+index}>{\"X\"+vari.xi}</InputGroupText>\r\n            </InputGroupAddon>\r\n            {index < variables.filter(vari => vari.descripcion !== '').length-1 && <InputGroupText key={'+IF'+index}>+</InputGroupText>}\r\n        </React.Fragment>) \r\n\r\n    return(\r\n            <InputGroup key={'INPUTFUNCIONAL'}>\r\n                {variablesToFunction}\r\n                <InputGroupText className='mx-1' key='IFOPT'>{' => '+props.objective.toUpperCase()}</InputGroupText>\r\n            </InputGroup>\r\n    \r\n    ) \r\n}\r\n\r\nexport default FuncionObj;","import React from \"react\";\r\nimport {\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardTitle,\r\n  Button,\r\n  Col,\r\n  Collapse,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Badge\r\n} from \"reactstrap\";\r\n\r\nclass ReferencesList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { references: false };\r\n  }\r\n\r\n  listDescriptionsVarItems = array =>\r\n    array\r\n      .filter(item => item.descripcion !== \"\")\r\n      .map(item => (\r\n        <ListGroupItem key={\"DLGIV\" + item.xi} className=\"text-left\">\r\n          <Badge>{\"X\" + item.xi}</Badge>\r\n          {\" \" + item.descripcion}\r\n          <Badge className='float-right'>{'C: '+item.coeficiente}</Badge>\r\n        </ListGroupItem>\r\n      ));\r\n\r\n  listDescriptionsResItems = array =>\r\n    array\r\n      .filter(item => item.descripcion !== \"\")\r\n      .map(item => (\r\n        <ListGroupItem key={\"DLGIR\" + item.ri} className=\"text-left\">\r\n          <Badge>{\"R\" + item.ri}</Badge>\r\n          {\" \" + item.descripcion}\r\n          <Badge className='float-right'>{item.coeficientes.map((co,indx) => co+' X'+indx+' ') + ' '+item.eq+' '+item.derecha}</Badge>\r\n        </ListGroupItem>\r\n      ));\r\n\r\n  render() {\r\n    //Obtenemos las propiedades del Super\r\n    let { variables } = this.props;\r\n    let { restricciones } = this.props;\r\n\r\n    return (\r\n      <Card outline color=\"secondary\" className=\"w-100 mt-3\">\r\n        <CardHeader>\r\n          <Row>\r\n            <Col className=\"text-left\">\r\n              <CardTitle>\r\n                <h4>Referencias</h4>\r\n              </CardTitle>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                outline\r\n                size=\"sm\"\r\n                onClick={() => this.setState({ references: !this.state.references })}\r\n                color={!this.state.references ? \"success\" : \"danger\"}\r\n              >\r\n                {!this.state.references ? \"Ver referencias\" : \"Ocultar referencias\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </CardHeader>\r\n        <Collapse isOpen={this.state.references}>\r\n          <CardBody>\r\n            <h5 className=\"text-center\">Variables:</h5>\r\n            <ListGroup>{this.listDescriptionsVarItems(variables)}</ListGroup>\r\n            <h5 className=\"text-center mt-5\">Restricciones:</h5>\r\n            <ListGroup>{this.listDescriptionsResItems(restricciones)}</ListGroup>\r\n          </CardBody>\r\n        </Collapse>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReferencesList;\r\n","import React from \"react\";\r\nimport { Container, Row, Card, CardBody, CardHeader, CardTitle, Alert } from \"reactstrap\";\r\nimport Restriccion from \"./Restriccion\";\r\nimport FuncionObj from \"./FuncionObj\";\r\nimport ReferencesList from \"../ReferencesList\";\r\n\r\nclass Processing extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { faltaCoe: \"\" };\r\n  }\r\n\r\n  isValidated() {\r\n    //Verificando si los coeficientes de las variables y las restricciones no son nulos\r\n    let verifQty = this.props.status.variables\r\n      .filter(va => va.descripcion !== \"\")\r\n      .every(va => va.coeficiente !== \"\");\r\n    let veriResQty = this.props.status.restricciones\r\n      .filter(re => re.descripcion !== \"\")\r\n      .every(re => re.coeficientes.every(co => co !== \"\") && re.derecha !== \"\");\r\n    if (verifQty && veriResQty) {\r\n      console.log(verifQty+'dff:'+veriResQty);\r\n      \r\n      this.props.lastStep(2);\r\n      this.setState({ faltaCoe: \"\" });\r\n      return true;\r\n    } else {\r\n      let faltaCoe;\r\n      faltaCoe = veriResQty\r\n        ? \"Falta algun coeficiente del Funcional\"\r\n        : \"Falta algun coeficiente en las Restricciones\";\r\n      this.setState({ faltaCoe });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  //En el siguiente handler, se toma del input de una variable en particular el coeficiente.\r\n  handleCoefVar = event => {\r\n    let { value, name } = event.target;\r\n    if (value) {\r\n      let { variables } = this.props.status;\r\n      variables[name].coeficiente = parseInt(value);\r\n      this.props.handleVariables(variables);\r\n      console.log(this.props.status.variables);\r\n    }\r\n  };\r\n\r\n  handleCoefRes = (event, ri) => {\r\n    let { name, value } = event.target;\r\n    let { restricciones } = this.props.status;\r\n    console.log(\"En la Res:\" + ri + \", en el campo:\" + name + \",con el valor:\" + value);\r\n\r\n    switch (name) {\r\n      case \"derecha\":\r\n        restricciones[ri].derecha = Number(value);\r\n        break;\r\n      case \"eq\":\r\n        restricciones[ri].eq = value;\r\n        break;\r\n      default:\r\n        restricciones[ri].coeficientes[name] = Number(value);\r\n        break;\r\n    }\r\n    console.log(restricciones);\r\n    this.props.handleRestricciones(restricciones);\r\n  };\r\n\r\n  render() {\r\n    //Obtenemos las propiedades del Super\r\n    let { variables } = this.props.status;\r\n    let { restricciones } = this.props.status;\r\n    let varsOperativas = variables.filter(va => va.descripcion !== \"\").length;\r\n\r\n    //Generamos el renderizado para cada una de los elementos de los arreglos obtenidos anteriormente.\r\n\r\n    let restriccionesInput = restricciones\r\n      .filter(item => item.descripcion !== \"\")\r\n      .map((restriccion, index) => (\r\n        <Restriccion\r\n          className=\"mt-1\"\r\n          key={\"R\" + index}\r\n          handleCoefRes={this.handleCoefRes}\r\n          cantVariables={varsOperativas}\r\n          restriccion={restriccion}\r\n        />\r\n      ));\r\n\r\n    return (\r\n      <>\r\n        <h3>Cargamos los datos de nuestro modelo</h3>\r\n        <Container>\r\n          <Row>\r\n            <ReferencesList variables={variables} restricciones={restricciones} />\r\n          </Row>\r\n          <Row>\r\n            <Card outline color=\"secondary\" className=\"w-100 mt-3\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-left\">\r\n                  <h4>Función objetivo</h4>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody className=\"mx-auto\">\r\n                <FuncionObj\r\n                  variables={variables}\r\n                  handleCoefVar={this.handleCoefVar}\r\n                  objective={this.props.status.objective}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Row>\r\n          <Row>\r\n            <Card outline color=\"secondary\" className=\"w-100 mt-3\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-left\">\r\n                  <h4>Restricciones</h4>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>{restriccionesInput}</CardBody>\r\n            </Card>\r\n          </Row>\r\n          {this.state.faltaCoe !== \"\" && (\r\n            <Row className=\"mt-3\">\r\n              <Alert className=\"mx-auto\" color=\"danger\">\r\n                {this.state.faltaCoe}\r\n              </Alert>\r\n            </Row>\r\n          )}\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Processing;\r\n","import React from 'react';\r\nimport {Card,CardTitle,CardBody,CardText,CardHeader,Table,CardFooter,Row,Col,Button,Collapse} from 'reactstrap';\r\nimport ReferencesList from '../ReferencesList'\r\n\r\nclass SimplexPresentation extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={details:false}\r\n    }\r\n\r\n    //Funcion que en base al uso de una variable, devuelve una tabla con los recursos utilizados\r\n    tablaDeRecursosFoot = (cantUsoVar,variableId) => {\r\n        let {restricciones} = this.props;\r\n        let tableBody = restricciones.filter(item => item.descripcion!== '')\r\n        //Realizamos calculos\r\n        .map( restri => \r\n            <tr key={'TdeV'+variableId+'R'+restri.ri}><td>{'R'+restri.ri}</td><td>{cantUsoVar*restri.coeficientes[variableId]}</td>\r\n            <td>{restri.derecha-(cantUsoVar*restri.coeficientes[variableId])}</td></tr>)\r\n        return(<Table size='sm' responsive>\r\n            <thead><tr><th>Recurso</th><th>Usado</th><th>Diferencia</th></tr></thead>\r\n            <tbody>{tableBody}</tbody>\r\n        </Table>)\r\n\r\n    }\r\n\r\n    mapperAnalisisTable = (result) => {\r\n        //El array al cucal enviamos los resultados procesados\r\n        let tableResult=[];\r\n        //Obtenemos el Set de Resultados con Formato [key,value]\r\n        let resultSetArray =  Object.entries(result.solutionSet);\r\n        console.log(\"Imprimimos el resultsSetArray:\" + resultSetArray);\r\n        //Obtenemos la matriz del simplex reducida\r\n        let matrix = result._tableau.matrix;\r\n        //Obtenemos los indices de cada columna\r\n        let indexByCol = result._tableau.varIndexByCol;\r\n        //Obtenemos la Lista de Variables Slack y Reales\r\n        let variablesList = result._tableau.variablesPerIndex\r\n        //Obtenemos la Lista de Variables Reales\r\n        let variablesRealesList = result._tableau.variablesPerIndex.filter(el => !el.isSlack);\r\n        //Contamos la Cantidad de elementos en la fila de resultados (van a ser cero por ser simplex reducido)\r\n        let itemsinCero = matrix[0].length - 1;\r\n        //Obtenemos cuales son las variables que no estan en el set de resultados (van a ser cero)\r\n        let varsEnCero = variablesRealesList.filter( vari => !Object.keys(result.solutionSet).includes(vari.id) )\r\n        //La cantidad de columnas en la fila de resultados - la cantidad de variables nulas, me devuelven la cantidad de slacks\r\n        let slacksEnCero = itemsinCero - varsEnCero.length;\r\n\r\n        //Procesamos INFO\r\n        //Primer elemento de la Tabla, el Optimo.\r\n        tableResult.push({name:'Optimo',item:'',value:result.evaluation});\r\n        //Procesamos todos los elementos a producir (result Set)\r\n        resultSetArray.forEach( ([key,value]) => tableResult.push({name:'Producir',item:'X'+key, value}) )\r\n        //Procesamos el uso de los recursos, es decir, los elementos extras de la Fila de Resultados(Matriz)\r\n        if (resultSetArray.length < matrix.length-1) {\r\n            console.log('hola');\r\n        }\r\n\r\n        //Procesamos los Costo de Oportunidad y los Valores Marginales\r\n        matrix[0].slice(1)\r\n                .forEach( (col,indCol) => {\r\n                    //Creamos un nuevo item.\r\n                    let item= {name:'',item:'',value:''};\r\n                    //Verificamos si es Slack o Variable Real\r\n                    if (variablesList[indexByCol[indCol+1]].isSlack){\r\n                        item.name = 'Valor Marginal';\r\n                        item.item = 'R'+indexByCol[indCol+1];\r\n                        item.value = Math.abs(col);\r\n                    }else{\r\n                        item.name = 'Costo de Oportunidad';\r\n                        item.item = 'X'+variablesList[indexByCol[indCol+1]].id;\r\n                        item.value = Math.abs(col);\r\n                    }\r\n                    \r\n                    //Empujamos el item a la tabla de resultados\r\n                    tableResult.push(item)})\r\n            \r\n        return tableResult\r\n    }\r\n\r\n    cardsVariablesRender = (variables,result) => variables\r\n                                                    .filter(vari => vari.descripcion !== '')\r\n                                                    .map( vari => \r\n                                                                <Card key={'C-V-'+vari.xi} outline color='secondary' className=\"w-100 mt-3 mx-auto\">\r\n                                                                    <CardHeader><CardTitle>{'Variable: X'+vari.xi}</CardTitle></CardHeader>    \r\n                                                                    <CardBody>\r\n                                                                        <Row><CardText>{\r\n                                                                            result.solutionSet[vari.xi] ? \r\n                                                                            'Se recomienda producir '+result.solutionSet[vari.xi]+' unidades':\r\n                                                                            'No se recomienda la produccion'}\r\n                                                                            {' de '+vari.descripcion}</CardText>\r\n                                                                        </Row>\r\n                                                                        <Row></Row> \r\n                                                            \r\n                                                                    </CardBody>\r\n                                                                    <CardFooter>\r\n                                                                        <CardText>Tabla de Recursos:</CardText>\r\n                                                                        {result.solutionSet[vari.xi] ? \r\n                                                                        this.tablaDeRecursosFoot(result.solutionSet[vari.xi],vari.xi):'Sin Consumo de Recursos'}\r\n                                                                    </CardFooter>\r\n\r\n                                                                </Card>)\r\n\r\n\r\n    render () {\r\n        //Obtenemos el resultado almacenado\r\n        //Obtenemos las Variables desde las props\r\n        let {variables, restricciones,result} = this.props;\r\n        \r\n        \r\n    \r\n        //Obtenemos  la informacion para la tabla de Analisis\r\n        let itemsTabAnalisis = this.mapperAnalisisTable(result); \r\n        //Renderizamos el Tablero de analisis\r\n        let elementosTabAnalisis = itemsTabAnalisis.map( (item, index) => <tr key={'T-A-'+index}><td>{item.name}</td><td>{item.item}</td><td>{item.value}</td></tr>);\r\n        \r\n        \r\n            \r\n        let resultAnalisisCard = \r\n            <Card outline color='secondary' className=\"w-100 mt-3 mx-auto\">\r\n                <CardHeader><CardTitle><h4>Tablero de Analisis</h4></CardTitle></CardHeader>\r\n                <CardBody>\r\n                    <Table>\r\n                        <thead><tr><th></th><th>Elemento</th><th>Valor</th></tr></thead>\r\n                        <tbody>\r\n                            {elementosTabAnalisis}\r\n                        </tbody>\r\n                    </Table>\r\n                </CardBody>\r\n                \r\n            </Card>\r\n\r\n        let resultDetalleCard = <Card outline color='secondary' className=\"w-100 mt-3 mx-auto\">\r\n                                    <CardHeader>\r\n                                        <Row>\r\n                                            <Col className=\"text-left\"><CardTitle><h5>Detalle de Variables Y Recursos:</h5></CardTitle></Col>\r\n                                            <Col><Button outline size='sm'\r\n                                                onClick={() => this.setState({details:!this.state.details})} \r\n                                                color={!this.state.details ? 'success':'danger'}>{!this.state.details ? 'Ver Detalles':'Ocultar Detalles'}</Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </CardHeader>\r\n                                    <Collapse isOpen={this.state.details}>\r\n                                        <CardBody>\r\n                                            {this.cardsVariablesRender(variables,result)}\r\n                                        </CardBody>\r\n                                    </Collapse>\r\n                                </Card>\r\n        return(\r\n                <CardBody>\r\n                    <Row>{resultAnalisisCard}</Row>\r\n                    <Row><ReferencesList variables={variables} restricciones={restricciones}/></Row>\r\n                    <Row>{resultDetalleCard}</Row>\r\n                </CardBody>)\r\n    }\r\n}\r\n\r\nexport default SimplexPresentation;","import React from 'react';\r\nimport {CardBody, Card, CardHeader,CardFooter,Table,Row,Col,CardTitle,Button} from 'reactstrap';\r\nimport {XYPlot, XAxis, YAxis, HorizontalGridLines,LineSeries, AreaSeries, VerticalGridLines,MarkSeries,DiscreteColorLegend,Hint} from 'react-vis';\r\nimport {Expression, Equation,Fraction} from 'algebra.js';\r\nimport ReferencesList from '../ReferencesList';\r\nvar randomColor = require('randomcolor');\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass GraphicPresentation extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={lineFunctional:[],convexPoints:[],tableResult:'',optimMark:[],points:[],lines:[],referencias:[],value:null,areaGraph:false}\r\n    }\r\n\r\n    componentDidMount() {\r\n        if ( this.props.graph ){\r\n            this.updateState()\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if ( prevProps !== this.props ){\r\n            if ( this.props.graph ){\r\n                this.updateState()\r\n            }\r\n        }\r\n    }\r\n\r\n    updateState = () =>{\r\n        let {variables,restricciones,result} = this.props\r\n        //Filtramos las restricciones y variables que no fueron filtradas antes.\r\n        restricciones = restricciones.filter(elem => elem.descripcion!=='');\r\n        variables = variables.filter(elem => elem.descripcion!=='');\r\n        //Obtenemos los coeficientes a evaluar en el Z\r\n        let coefToValueZ = this.getCoeficientesToEv(variables)\r\n        //Obtenemos la paleta de colores.\r\n        let referencias = this.getColorList(restricciones);\r\n        //Obtenemos las Lineas y las Expresiones\r\n        let {lines,expresiones,highestValueX,highestValueY} = this.getLinesAndExpressions(restricciones);\r\n        //Obtenemos los Puntos de marca general\r\n        let {points,convexPoints} = this.getPoints(restricciones,expresiones,result,highestValueX,highestValueY)    \r\n        //Obtenemos el Punto Optimo\r\n        let optimMark = []\r\n        if( Object.entries(result).length ){ optimMark = [this.getOptimPoint(result)]}\r\n        //Obtenemos la Recta del Funcional.\r\n        // console.log('Maximos X:'+highestValueX+', Y:e'+highestValueY);\r\n        let lineFunctional = this.getObjectiveFunctionLine(variables,optimMark[0],highestValueX,highestValueY);\r\n        // console.log(lineFunctional);\r\n        //Obtenemos la Tabla de resultados.\r\n        let tableResult = this.getTableResult(optimMark.concat(points),coefToValueZ,restricciones)\r\n        //Almacenamos el Estado.\r\n        this.setState({referencias,lines,points,optimMark,convexPoints,lineFunctional,tableResult});\r\n    }\r\n\r\n    getCoeficientesToEv =  variables => {\r\n        let coef={x:0,y:0};\r\n        coef.x = variables[0].coeficiente;\r\n        coef.y = variables[1].coeficiente;\r\n        return coef\r\n    }\r\n\r\n\r\n    getLinesAndExpressions = restricciones => {\r\n        const getFrac = real => new Fraction(Math.pow(10,(real - real.toFixed()).toString().length - 2)*real, Math.pow(10,(real - real.toFixed()).toString().length - 2)) \r\n        //Tipos de Expresiones: 0: Constante en X; 1: Constante en Y; 2: Recta con pendiente.\r\n        let expresiones = [];\r\n        let arrayDeRestriccionesConLosDosCoef =  restricciones.filter(el=> ( el.coeficientes[0] > 0 && el.coeficientes[1] > 0) )\r\n        let highestValueY = Math.max.apply(Math,arrayDeRestriccionesConLosDosCoef.map( restri => (restri.derecha / restri.coeficientes[1])));\r\n        let highestValueX = Math.max.apply(Math,arrayDeRestriccionesConLosDosCoef.map( restri => (restri.derecha / restri.coeficientes[0])));\r\n        // console.log('Ymax: '+highestValueY+' Xmax:'+highestValueX);\r\n        \r\n        let lines = restricciones.map( restri => {\r\n      \r\n\r\n            let xNum = !Number.isInteger(Number(restri.coeficientes[0])) ? getFrac(Number(restri.coeficientes[0])):Number(restri.coeficientes[0]);\r\n\r\n            let yNum = !Number.isInteger(Number(restri.coeficientes[1])) ? getFrac(Number(restri.coeficientes[1])):Number(restri.coeficientes[1]);\r\n \r\n            //Si posee ambos coeficientes entoces es una recta con pendiente.\r\n            if ( xNum !== 0  &&  yNum!== 0) {\r\n                let x = new Expression('x').multiply(xNum);\r\n                let y = new Expression('y').multiply(yNum);\r\n                let expressRestri = new Expression().add(x).add(y);  \r\n                let restriEquation = new Equation(expressRestri,restri.derecha)\r\n                expresiones.push({restriEquation,tipo:2})\r\n                let yEqu = (new Equation(restriEquation.solveFor('x'),0)).solveFor('y');\r\n                let xEqu = (new Equation(restriEquation.solveFor('y'),0)).solveFor('x');\r\n                //Analizamos pendientes positivas y negativas\r\n                if (xEqu >= 0 && yEqu >= 0) {\r\n                    //Si es Pendiente negativa tenemos que corta en los puntos +x y +y\r\n                    if (restri.eq === '>=') {\r\n                        return([{x:0,y:yEqu,y0:highestValueY},{x:xEqu,y:0,y0:highestValueY},{x:highestValueX,y:0,y0:highestValueY}])\r\n                    }else{\r\n                        return([{x:0,y:yEqu},{x:xEqu,y:0}])\r\n                    }\r\n                    \r\n                }else{\r\n                    //Si es Pendiente positiva solo corta en +x o en +y\r\n                    if(yEqu >= 0){\r\n                        //Si corta en +y , entonces calculamos el punto para el grafico en +x\r\n                        let relation = Math.abs(yEqu/xEqu)\r\n                        let valY = yEqu+highestValueX*relation\r\n                        //Si el valor calculado para Y es menor al maximo, lo llevamos hasta alli y actualizamos el Xmax\r\n                        if (valY < highestValueY){\r\n                            valY = highestValueY\r\n                            highestValueX = (highestValueY-yEqu)/relation\r\n                            // console.log('NewXMAX: '+highestValueX);\r\n                        }else{\r\n                            highestValueY = valY            \r\n                            // console.log('NewYMAX: '+highestValueY);\r\n                        }\r\n                        return([{x:0,y:yEqu},{x:highestValueX,y:valY}])\r\n                    }else{\r\n                        if (xEqu >= 0) {\r\n                            //Si corta en +x , entonces calculamos el punto para el grafico en +y\r\n                            let relation = Math.abs(xEqu/yEqu)\r\n                            let valX = xEqu+highestValueY*relation\r\n                            //Si el valor calculado para Y es menor al maximo, lo llevamos hasta alli y actualizamos el YMax\r\n                            if (valX < highestValueX){\r\n                                valX = highestValueX\r\n                                highestValueY = (highestValueX-xEqu)/relation\r\n                                // console.log('NewYMAX: '+highestValueY);\r\n                            }else{\r\n                                highestValueX = valX\r\n                                // console.log('NewXMAX: '+highestValueX);\r\n                            }\r\n                            // console.log(xEqu+' '+yEqu);\r\n                            return([{x:xEqu,y:0},{x:valX,y:highestValueY}])\r\n                        }\r\n                    }\r\n                }\r\n            }else {\r\n                //Sino, es una constante.\r\n                if (xNum !== 0) {\r\n                    //Constante en X\r\n                    let x = new Expression('x').multiply(xNum);\r\n                    let restriEquation = new Equation(x,restri.derecha)\r\n                    expresiones.push({restriEquation,tipo:0})\r\n                    let xEqu = restriEquation.solveFor('x');\r\n                    if (xEqu >= 0 ){\r\n                        return([{x:xEqu,y:0},{x:xEqu,y:highestValueY}])\r\n                    }\r\n                }else {\r\n                    //Constante en Y\r\n                    let y = new Expression('y').multiply(yNum);\r\n                    let restriEquation = new Equation(y,restri.derecha)\r\n                    expresiones.push({restriEquation,tipo:1})\r\n                    let yEqu = restriEquation.solveFor('y')\r\n                    if ( yEqu >= 0) {\r\n                        return([{x:0,y:yEqu},{x:highestValueX,y:yEqu}])\r\n                    }               \r\n                } \r\n            }\r\n        })\r\n        // console.log('MAXS:'+highestValueX+'y:'+highestValueY);\r\n        \r\n        return { lines,expresiones,highestValueX,highestValueY }\r\n    }\r\n\r\n    getColorList = restricciones => restricciones.map( restri => Object({title: 'R'+restri.ri+' Tipo:'+restri.eq, color: randomColor({hue: 'random',luminosity: 'ligth'})}))\r\n\r\n    getOptimPoint = solSet => {\r\n        console.log('Generating Optim Point');\r\n        //Analizamos el Punto Optimo.\r\n        if ( solSet['0'] && solSet['1'] ) {return{x:Number(solSet['0']).toFixed(2),y:Number(solSet['1']).toFixed(2),P:'0 - OPTIMO'}\r\n        }else if ( solSet['0'] ) {return{x:Number(solSet['0']).toFixed(2),y:(0).toFixed(2),P:'0 - OPTIMO'}\r\n        }else { return{x:(0).toFixed(2),y:Number(solSet['1']).toFixed(2),P:'0 - OPTIMO'}}\r\n    }\r\n\r\n    getObjectiveFunctionLine = (variables,optimPoint,xMax,yMax) => {\r\n        console.log('Getting OF Line');\r\n        //Funcion que devuelve una Fraccion de Algebra.js a partir de un numero real.\r\n        const getFrac = real => new Fraction(Math.pow(10,(real - real.toFixed()).toString().length - 2)*real, Math.pow(10,(real - real.toFixed()).toString().length - 2)) \r\n        if (optimPoint){\r\n            try {\r\n                if (variables[0].coeficiente !== 0  && variables[1].coeficiente !== 0) {\r\n\r\n                    let xPoint = !Number.isInteger(Number(optimPoint.x)) ? getFrac(Number(optimPoint.x)):Number(optimPoint.x);\r\n\r\n                    let yPoint = !Number.isInteger(Number(optimPoint.y)) ? getFrac(Number(optimPoint.y)):Number(optimPoint.y);\r\n               \r\n                    let xExp = new Expression('x').subtract(xPoint).multiply(variables[0].coeficiente);\r\n                    let yExp = new Expression('y').subtract(yPoint).multiply(variables[1].coeficiente);\r\n                    \r\n                    let expFunObj = new Equation(new Expression().add(xExp).add(yExp),0);  \r\n          \r\n                    let xEqu = (new Equation(expFunObj.solveFor('y'),0)).solveFor('x');\r\n\r\n                    let yEqu = (new Equation(expFunObj.solveFor('x'),0)).solveFor('y');\r\n        \r\n                    //Analizamos pendientes positivas y negativas\r\n                    // console.log('Result Y: '+yEqu.toString());\r\n                    // console.log('yMax: '+yMax);\r\n                    // console.log('Result X: '+xEqu.toString());\r\n                    // console.log('xMax: '+xMax);\r\n                    //Analizamos los Puntos\r\n                    if (xEqu >= 0 && yEqu >=0){\r\n                        \r\n                            if (xEqu > xMax && yEqu > yMax) {\r\n                                let yRelation = (xEqu/yEqu)\r\n                                let xRelation = (yEqu/xEqu)\r\n                                let xVal = xEqu - yMax/xRelation\r\n                                let yVal = yEqu - xMax/yRelation\r\n                                return [{x:xMax,y:yVal},{x:xVal,y:yMax}]\r\n                            }else if (xEqu <= xMax && yEqu <= yMax) {\r\n                                return [{x:xEqu,y:0},{x:0,y:yEqu}]\r\n                            }else if (xEqu > xMax){\r\n                                    let yRelation = (xEqu/yEqu)\r\n                                    let yVal = yEqu - xMax/yRelation\r\n                                    return [{x:xMax,y:yVal},{x:0,y:yEqu}]\r\n                                }else{\r\n                                    let xRelation = (yEqu/xEqu)\r\n                                    let xVal = xEqu - yMax/xRelation\r\n                                    return [{x:xEqu,y:0},{x:xVal,y:yMax}]\r\n                                }\r\n                    }else if ( xEqu < 0 && yEqu < 0 ) {\r\n                        // console.log('Los dos Neg');\r\n                        return [{x:xEqu,y:0},{x:0,y:yEqu}]\r\n                    }else if ( xEqu >= 0 ) {\r\n                        // console.log('Solo xEqu pos');\r\n                        if (xEqu > xMax){\r\n                            let yRelation = (xEqu/yEqu)\r\n                            let yVal = yEqu - xMax/yRelation\r\n                            return [{x:xMax,y:yVal},{x:0,y:yEqu}]\r\n                        }else{\r\n                            let xRelation = (yEqu/xEqu)\r\n                            let xVal = xEqu - yMax/xRelation\r\n                            if (xVal > xMax){\r\n                                // console.log('Caso XVal > xMax');\r\n                                \r\n                                let xRelation = Math.abs(yEqu/xEqu)\r\n                                let yVal = xMax*xRelation + yEqu\r\n                                return [{x:xEqu,y:0},{x:xMax,y:yVal}]\r\n                            }else{\r\n                                // console.log('Caso Comun');            \r\n                                return [{x:xEqu,y:0},{x:xVal,y:yMax}]\r\n                            }    \r\n                        }\r\n                    }else{\r\n                        // console.log('Solo yEqu pos')\r\n                        if (yEqu > yMax){\r\n                            console.log('Caso pendiente de desarrollo, Que hacemos? damos mas altura para mostrar la recta?');\r\n                            return []\r\n                        }else{\r\n                            let yRelation = Math.abs(yEqu/xEqu)\r\n                            let xVal = yRelation * (yMax - yEqu)\r\n                            if (xVal > xMax){\r\n                                console.log('Caso PENDIENTE DE VERIFICACION XVal > xMAx');\r\n                                let xRelation = Math.abs(xEqu/yEqu)\r\n                                let yVal = xMax*xRelation + yEqu\r\n                                return [{x:xEqu,y:0},{x:xMax,y:yVal}]\r\n                            }else{\r\n                                // console.log('Caso Comun');            \r\n                                return [{x:0,y:yEqu},{x:xVal,y:yMax}]\r\n                            }    \r\n                        }\r\n                    }\r\n                }else if( variables[0].coeficiente !== 0) {\r\n                    // console.log('Sin puendiente, Constante en X'); \r\n                    //Constante en X\r\n                    \r\n                    let xPoint = !Number.isInteger(Number(optimPoint.x)) ? getFrac(Number(optimPoint.x)):Number(optimPoint.x);\r\n                    let xExp = new Expression('x').subtract(xPoint).multiply(variables[0].coeficiente);   \r\n                    let xEqu = (new Equation(xExp,0)).solveFor('x');\r\n                   \r\n                    if (xEqu >= 0 ){\r\n                        return([{x:xEqu,y:0},{x:xEqu,y:yMax}])\r\n                    }     \r\n                }else{\r\n\r\n                    // console.log('Sin pendiente, Constante en Y');\r\n                    //Constante en Y\r\n                    let yPoint = !Number.isInteger(Number(optimPoint.y)) ? getFrac(Number(optimPoint.y)):Number(optimPoint.y);\r\n                    let yExp = new Expression('y').subtract(yPoint).multiply(variables[1].coeficiente);\r\n                    let yEqu = (new Equation(yExp,0)).solveFor('y');\r\n                    if (yEqu >= 0 ){\r\n                        return([{x:0,y:yEqu},{x:xMax,y:yEqu}])\r\n                    }     \r\n                }\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n                return [] \r\n            }\r\n\r\n        }else return []      \r\n    }\r\n\r\n    getPoints = (restricciones,expresiones,solSet,xMax,yMax) => {\r\n        //Definimos las Funciones necesarias para el buen funcionamiento de esta Funcion\r\n        const getAreaPointsForConvex = points => {\r\n            //Funcion que calcula el Angulo entre dos puntos.\r\n            const calcAng = (point,p) => Math.atan2(point.y - p.y, point.x - p.x) * 180 / Math.PI + 180;\r\n            //Precargamos puntos que podrian definir el convexo.\r\n            let possiblePoints = [{x:0,y:0},{x:xMax,y:yMax},{x:Number(points[0].x),y:0},{x:0,y:Number(points[0].y)},{x:xMax,y:Number(points[0].y)},{x:Number(points[0].x),y:xMax}]            \r\n            //Obtenemos la lista de puntos\r\n            let pointsList = [...points];\r\n            //Verificamos puntos que podrian definir el convexo.\r\n            possiblePoints.forEach( p => (verifyPoint(p,restricciones,points)) && pointsList.push(p) ) \r\n            //Nos aseguramos de tomar el punto que este en el extremo derecho.\r\n            pointsList.sort((a,b) => a.x<b.x ? 1:-1);\r\n            //Creamos nuestra Output\r\n            let orderedPoints = [];\r\n            let point = pointsList[0];\r\n            orderedPoints.push(point)\r\n            pointsList.splice(0,1) \r\n            while ( pointsList.length ) {\r\n                //Encuentra el punto que tiene el angulo minimo\r\n                let minAngle = pointsList.reduce( (min,p) => calcAng(point,p) < min ? calcAng(point,p) : min, 361);\r\n                if (minAngle < 361) {\r\n                    let indNewPoint = pointsList.findIndex(p => calcAng(point,p) === minAngle);\r\n                    point = pointsList[indNewPoint]\r\n                    orderedPoints.push(point)\r\n                    pointsList.splice(indNewPoint,1)           \r\n                } else { \r\n                    console.log('Cant find any Angle');\r\n                    break}\r\n            }\r\n            orderedPoints.push(orderedPoints[0])\r\n            return orderedPoints\r\n        }\r\n        \r\n        //Funcion que se encarga de realizar las verificaciones correspondientes para agregar un punto o no.\r\n        const verifyPoint = (point, restricciones, points) => {\r\n            if (point.x >= 0 && point.y >= 0 ){\r\n                if ( !verifyPointInPoints(point,points) ) {\r\n                    if ( verifyPointInRestrictions(point,restricciones) ) { return true } else return false\r\n                }else return false\r\n            }else return false\r\n        }\r\n\r\n        //Funcion que se encarga de Verificar si un punto ya se encuentra en la lista de puntos (o ya fue verificado antes).\r\n        const verifyPointInPoints = (point,points) => points.some( pointL => (pointL.x === point.x.toFixed(2) && pointL.y === point.y.toFixed(2)) )\r\n        \r\n        //Funcion que se encarga de verificar que un punto cumpla con todas las Restricciones.\r\n        const verifyPointInRestrictions = (point,restricciones) => restricciones.every( restri => {\r\n                    let calIzq = (restri.coeficientes[0]*point.x + restri.coeficientes[1]*point.y);\r\n                    if( restri.eq === '>=' ) {\r\n                        // console.log('P:('+point.x +','+point.y+') :'+calIzq+' >='+ restri.derecha );                        \r\n                        return ( calIzq >= restri.derecha ) \r\n                    }else { \r\n                        // console.log('P:('+point.x +','+point.y+') :'+calIzq+' <='+ restri.derecha );                        \r\n                        return ( calIzq <= restri.derecha )} \r\n                })\r\n        // Funcion que devuelve un punto verificado y que corta en un Eje.\r\n        const getPointAxFromExpCenX = ( exp ) => {       \r\n            //Obtenemos el Corte sobre el Eje-Y\r\n            let expResultX = Number((new Equation(exp.solveFor('y'),0)).solveFor('x'));\r\n            if ( expResultX >= 0 ) {\r\n                //Generamos el Punto en X\r\n                let point = {x:expResultX,y:0,P:points.length}\r\n                //Verificamos el punto en X con las Restricciones.\r\n                if (verifyPoint(point,restricciones,points)){\r\n                    point.x=point.x.toFixed(2)\r\n                    point.y=point.y.toFixed(2)\r\n                    return point} \r\n            }\r\n        };\r\n        // Funcion que devuelve un punto verificado y que corta en un Eje.\r\n        const getPointAxFromExpCenY = ( exp ) => {       \r\n            //Obtenemos el Corte sobre el Eje-Y\r\n            let expResultY = Number((new Equation(exp.solveFor('x'),0)).solveFor('y'));\r\n            if ( expResultY >= 0 ) {\r\n                //Generamos el Punto en Y\r\n                let point = {x:0,y:expResultY,P:points.length}\r\n                //Verificamos el punto en Y con las Restricciones.\r\n                if (verifyPoint(point,restricciones,points)){\r\n                    point.x=point.x.toFixed(2)\r\n                    point.y=point.y.toFixed(2)\r\n                    return point} \r\n            }   \r\n        };\r\n        const getPointAxFromExpY = ( expY ) => {\r\n            //Obtenemos el Corte sobre el Eje-Y\r\n            let expResultY = Number(expY.solveFor('y'));\r\n            if ( expResultY >= 0 ) {\r\n                //Generamos el Punto en Y\r\n                let point = {x:0,y:expResultY,P:points.length}\r\n                //Verificamos el punto en Y con las Restricciones.\r\n                if (verifyPoint(point,restricciones,points)){\r\n                    point.x=point.x.toFixed(2)\r\n                    point.y=point.y.toFixed(2)\r\n                    return point} \r\n            }\r\n            \r\n        };\r\n        const getPointAxFromExpX = (expX) => {\r\n            //Obtenemos Cortes sobre el Eje-X\r\n            let expResultX = Number(expX.solveFor('x'));\r\n            if ( expResultX >= 0 ) {\r\n                //Generamos el Punto en X\r\n                let point = {x:expResultX,y:0,P:points.length}\r\n                //Verificamos el punto en X con las Restricciones.\r\n                if (verifyPoint(point,restricciones,points)){\r\n                    point.x=point.x.toFixed(2)\r\n                    point.y=point.y.toFixed(2)\r\n                    return point} \r\n            } \r\n        }\r\n        //Funcion que devuelve un punto verificado con una Expresion en X y otra en Y\r\n        const getPointFromExpXExpY = ( expX,expY ) => {\r\n            let xRes = Number(expX.solveFor('x'));\r\n            let yRes = Number(expY.solveFor('y'));\r\n            //Verificamos que no se corten en algun otro cuadrante que no sea el de analisis.\r\n            if ( xRes >= 0  && yRes >= 0 ) {\r\n                //Generamos el Punto.\r\n                let point = {x:xRes,y:yRes,P:points.length}\r\n                //Verificamos el Punto.\r\n                if (verifyPoint(point,restricciones,points)){\r\n                    point.x=point.x.toFixed(2)\r\n                    point.y=point.y.toFixed(2)\r\n                    return point} \r\n            }\r\n        };\r\n        //Funcion que devuelve un punto verificado con una Expresion Completa y otra en Y\r\n        const getPointFromExpCExpY = ( expC,expY ) => {\r\n            // console.log('EXP C y Recta Y');\r\n            let expResultY = Number(expY.solveFor('y'));\r\n            let expResultX = Number((new Equation(expC.solveFor('y'),expY.solveFor('y'))).solveFor('x'));\r\n            //Verificamos que no se corten en algun otro cuadrante que no sea el de analisis.\r\n            if ( expResultX >= 0  && expResultY >= 0 ) {\r\n                //Generamos el Punto.\r\n                let point = {x:expResultX,y:expResultY,P:points.length}\r\n                //Verificamos el Punto.\r\n                if (verifyPoint(point,restricciones,points)){\r\n                    point.x=point.x.toFixed(2)\r\n                    point.y=point.y.toFixed(2)\r\n                    return point} \r\n            }\r\n        };\r\n        //Funcion que devuelve un punto verificado con una Expresion Completa y otra en X\r\n        const getPointFromExpCExpX = ( expC,expX ) => {\r\n            // console.log('EXP C y Recta X');\r\n            let expResultX = Number(expX.solveFor('x'));\r\n            let expResultY = Number((new Equation(expC.solveFor('x'),expX.solveFor('x'))).solveFor('y'));\r\n            //Verificamos que no se corten en algun otro cuadrante que no sea el de analisis.\r\n            if ( expResultX >= 0  && expResultY >= 0 ) {\r\n                //Generamos el Punto.\r\n                let point = {x:expResultX,y:expResultY,P:points.length}\r\n                //Verificamos el Punto.\r\n                if (verifyPoint(point,restricciones,points)){\r\n                    point.x=point.x.toFixed(2)\r\n                    point.y=point.y.toFixed(2)\r\n                    return point}\r\n            } \r\n        };\r\n        //Funcion que devuelve un punto verificado con dos Expresion Completas.\r\n        const getPointFromTwoExpC = (exp1,exp2) => {\r\n            let expResultX = Number((new Equation(exp1.restriEquation.solveFor('y'),exp2.restriEquation.solveFor('y'))).solveFor('x'));\r\n            let expResultY = Number((new Equation(exp1.restriEquation.solveFor('x'),exp2.restriEquation.solveFor('x'))).solveFor('y'));\r\n            //Verificamos que no se corten en algun otro cuadrante que no sea el de analisis.\r\n            if ( expResultX >= 0  && expResultY >= 0 ) {\r\n                //Generamos el Punto.\r\n                let point = {x:expResultX,y:expResultY,P:points.length}\r\n                //Verificamos el Punto.\r\n                if (verifyPoint(point,restricciones,points)){\r\n                    point.x=point.x.toFixed(2)\r\n                    point.y=point.y.toFixed(2)\r\n                    return point}\r\n                } \r\n        };\r\n        //Funcion que devuelve Un punto de Dos Expresiones\r\n        const getPointFromTwoExp = (exp1,exp2) => {\r\n            try {\r\n                //Verificamos los Tipos\r\n                if ( exp1.tipo === 2 && exp2.tipo === 2 ) {\r\n                    //Caso de que son dos rectas Completas\r\n                    return getPointFromTwoExpC(exp1,exp2)  \r\n                }else if( exp1.tipo === 2){\r\n                    //La primera es Recta completa y la otra o solo de X o solo de Y\r\n                    if( exp2.tipo === 0) { return getPointFromExpCExpX(exp1.restriEquation,exp2.restriEquation) \r\n                    }else return getPointFromExpCExpY(exp1.restriEquation,exp2.restriEquation)\r\n                }else if( exp2.tipo === 2 ){\r\n                    //La seguna es la Recta completa entonces la otra es o solo de X o solo de Y\r\n                    if( exp1.tipo === 0) { return getPointFromExpCExpX(exp2.restriEquation,exp1.restriEquation)\r\n                    }else return getPointFromExpCExpY(exp2.restriEquation,exp1.restriEquation)\r\n                }else if (exp1.tipo === 0){\r\n                    //Si la primera es una recta Solo de X y la otra puede ser de Y\r\n                    if( exp2.tipo === 1) { return getPointFromExpXExpY(exp1.restriEquation,exp2.restriEquation) }\r\n                }else{\r\n                    //Si la Primera es una recta solo de Y y la otra puede ser de X\r\n                    if( exp2.tipo === 0) { return getPointFromExpXExpY(exp2.restriEquation,exp1.restriEquation) }\r\n                }  \r\n            } catch (error) {\r\n                console.log(error);     \r\n            }\r\n            \r\n        };\r\n        \r\n        //Limpiamos nuestro array de Puntos\r\n        let points = [];\r\n        \r\n        //El primer punto que obtenemos es el Optimo, ya que deseamos que no se repita.\r\n        if ( Object.entries(solSet).length ){ points.push(this.getOptimPoint(solSet)) }\r\n        \r\n\r\n        //Analizamos las Rectas que cortan en los Ejes o Rectas sin pendiente.\r\n        expresiones.forEach( exp => {\r\n            if (exp.tipo === 2) {\r\n                //Si es Completa Corta en los dos Ejes\r\n                let pointX = getPointAxFromExpCenX(exp.restriEquation);\r\n                if (pointX) { points.push(pointX) }\r\n                let pointY = getPointAxFromExpCenY(exp.restriEquation)\r\n                if (pointY) { points.push(pointY) }\r\n            }else if(exp.tipo === 0){\r\n                //Solo Corta en X\r\n                let point = getPointAxFromExpX(exp.restriEquation);\r\n                if (point) { points.push(point) }\r\n\r\n            }else{\r\n                //Solo corta en Y\r\n                let point = getPointAxFromExpY(exp.restriEquation);\r\n                if (point) { points.push(point) }\r\n            }\r\n        })\r\n\r\n        //Analizamos los cortes de las Rectas de Restricciones.\r\n        expresiones.forEach( exp1 => {\r\n            //Validamos cada unas de las Rectas con las demas.\r\n            expresiones.forEach( exp2 => {\r\n                //Verificamos que no sea la misma recta.\r\n                if( exp1 !== exp2 ) {\r\n                    let point = getPointFromTwoExp(exp1,exp2);\r\n                    if (point) {points.push(point)}\r\n                } \r\n            })\r\n        });\r\n\r\n        //Obtenemos la secuencia de puntos que define nuestro Convexo.\r\n        let convexPoints = getAreaPointsForConvex(points);\r\n        // console.log('Puntos:');\r\n        // console.log(convexPoints);\r\n        //Debemos eliminar el punto optimo para que no se imprima en las marcas simples.\r\n        if( Object.entries(solSet).length ){ points.shift() }\r\n        return {points,convexPoints}\r\n    }\r\n\r\n    //Funcion que se encarga de devolverme la tabla.\r\n    getTableResult = (points,coeficientes,restricciones) =>{ \r\n        const calcSlacksValue = point => {\r\n            return restricciones.map( restri => <td key={'S-C-'+point.P+'-'+restri.ri}>{(Math.abs(restri.coeficientes[0]*point.x+restri.coeficientes[1]*point.y - restri.derecha)).toFixed(2)}</td>)\r\n        }\r\n        const calcResult = point =>{return (Math.abs(coeficientes.x*point.x + coeficientes.y*point.y)).toFixed(2)}\r\n        console.log(\"IMPRIMIENDO RESULT:\" + calcResult);\r\n        let slacksTitles = restricciones.map(restri => <th key={'S-T-'+restri.ri}>{'S'+restri.ri}</th>)\r\n        return( <Table>\r\n                    <thead><tr><th>Punto</th><th>Resultado</th><th>X0</th><th>X1</th>{slacksTitles}</tr></thead>\r\n                    <tbody>{points.map(point => <tr key={'T-P-'+point.P}><td>P:{point.P}</td><td>{calcResult(point)}</td><td>{point.x}</td><td>{point.y}</td>{calcSlacksValue(point)}</tr>)}</tbody>\r\n                </Table>)\r\n    }\r\n       \r\n     \r\n    //Funcion que encarga de ocultar la descripcion del punto.  \r\n    hidePoint = () => this.setState({value: null})\r\n\r\n    //Funcion que se encarga de mostrar la descripcion del punto.\r\n    showPoint = value => this.setState({ value })\r\n\r\n\r\n    mapperAreaSeries = (lines,referencias) => \r\n        lines.map((data,index) => <AreaSeries key={'L-S-A'+index} opacity={0.3} color={referencias.length > 0 ?referencias[index].color:'red'} data={data}/>)\r\n    \r\n    mapperLinesSeries = (lines,referencias) => \r\n    lines.map((data,index) => <LineSeries key={'L-S-L'+index} color={referencias.length > 0 ?referencias[index].color:'red'} data={data}/>)\r\n\r\n\r\n    render () {\r\n        let {variables,restricciones} = this.props\r\n        let {referencias,lines,value,points,optimMark,convexPoints,lineFunctional,areaGraph,tableResult} = this.state;\r\n        return( \r\n        <CardBody>\r\n            <Card outline color='secondary'>\r\n                <CardHeader>\r\n                    <Row>\r\n                        <Col className=\"text-left\"><CardTitle><h4>Grafico:</h4></CardTitle></Col>\r\n                        <Col><Button outline size='sm'\r\n                            onClick={() => this.setState({areaGraph:!this.state.areaGraph})} \r\n                            color={!this.state.areaGraph ? 'success':'danger'}>{!this.state.areaGraph ? 'Ver Sombra de Restricciones':'Ocultar Sombra de Restricciones'}</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </CardHeader>\r\n                <CardBody>\r\n                    <Row className='mx-auto GraphClass'>\r\n                        <XYPlot onMouseLeave={() => this.setState({pointer: null})} width={500} height={500}>\r\n                            <HorizontalGridLines/>\r\n                            <VerticalGridLines/>\r\n                            <XAxis title='Variable X0' />\r\n                            <YAxis  title='Variable X1'/>\r\n\r\n                            {areaGraph && this.mapperAreaSeries(lines,referencias)}\r\n                            \r\n                            {this.mapperLinesSeries(lines,referencias)}\r\n\r\n                            <AreaSeries fill='green' stroke='#fffff' style={{strokeWidth: 0}} opacity={0.6} data={convexPoints}/>\r\n\r\n                            <LineSeries color='red' strokeStyle='dashed' data={lineFunctional}/>\r\n                            \r\n                            <MarkSeries onValueMouseOver={this.showPoint} onValueMouseOut={this.hidePoint}\r\n                                        color={'blue'} opacity={0.7} data={points}/>\r\n                            \r\n                            <MarkSeries onValueMouseOver={this.showPoint} onValueMouseOut={this.hidePoint}\r\n                                        color={'green'} data={optimMark}/>\r\n                            {value && <Hint value={value} />}\r\n\r\n                        </XYPlot>\r\n                    </Row>\r\n                    <Row className='mx-auto'><DiscreteColorLegend orientation=\"horizontal\" items={referencias}/></Row>\r\n                    <Row><ReferencesList variables={variables} restricciones={restricciones}/></Row>\r\n                </CardBody>\r\n                <CardFooter>\r\n                    {tableResult}\r\n                </CardFooter>\r\n            </Card>\r\n        </CardBody> )\r\n    }\r\n}\r\n\r\nexport default GraphicPresentation;","import React from \"react\";\r\nimport { Card, CardTitle, Row, CardHeader, Badge } from \"reactstrap\";\r\nimport solver from \"javascript-lp-solver\";\r\nimport SimplexPresentation from \"./SimplexPresentation\";\r\nimport GraphicPresentation from \"./GraphicPresentation\";\r\n\r\nlet convertAppToModelForSolverPrimal = datosApp => {\r\n  //Obtenemos los Datos de la aplicacion\r\n  let { restricciones, variables, objective, integer } = datosApp;\r\n  variables = variables.filter(item => item.descripcion !== \"\");\r\n  restricciones = restricciones.filter(item => item.descripcion !== \"\");\r\n  //Precargamos el Modelo\r\n  let model = { optimize: \"coeficiente\", opType: \"\", constraints: {}, variables: {}, ints: {} };\r\n\r\n  //Tratamos el objetivo\r\n  model.opType = objective;\r\n\r\n  //Verificamos si se desea PL Entera\r\n  if (integer) {\r\n    variables.forEach(vari => (model.ints[vari.xi] = 1));\r\n  }\r\n  //Tratamos las Variables\r\n  variables.forEach(vari => {\r\n    //Generamos una nueva Variable\r\n    let newVari = {};\r\n    newVari.coeficiente = vari.coeficiente;\r\n    restricciones.forEach(restri => (newVari[\"r\" + restri.ri] = restri.coeficientes[vari.xi]));\r\n    // console.log(newVari);\r\n    model.variables[vari.xi] = newVari;\r\n  });\r\n  //Tratamos las Restricciones\r\n  restricciones.forEach(restri => {\r\n    if (restri.eq === \">=\") {\r\n      let res = {};\r\n      res.min = restri.derecha;\r\n      model.constraints[\"r\" + restri.ri] = res;\r\n    } else {\r\n      let res = {};\r\n      res.max = restri.derecha;\r\n      model.constraints[\"r\" + restri.ri] = res;\r\n    }\r\n  });\r\n\r\n  return model;\r\n};\r\n\r\nclass Presentation extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { result: false , details: false };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let result = false ;\r\n    if ( this.validateCoeficientes(this.props) ){\r\n      console.log('Validado..');\r\n      result = this.calculateResults();\r\n    }\r\n    console.log(result);\r\n    this.setState({ result })\r\n  }\r\n\r\n  componentWillReceiveProps(futureProps) {\r\n    if (this.props !== futureProps) {\r\n      let result = false ;\r\n      if ( this.validateCoeficientes(futureProps) ){\r\n        console.log('Validado..');\r\n        result = this.calculateResults();\r\n      }\r\n      console.log(result);\r\n      this.setState({ result })\r\n    }\r\n  }\r\n\r\n   //Funcion que Valida si es posible operar con los datos ingresados\r\n   validateCoeficientes = props => {\r\n    console.log('Validando..');\r\n    let {variables, restricciones } = props.status;\r\n    //Verificando si los coeficientes de las variables y las restricciones no son nulos\r\n    let varsOperatives = variables.filter(va => va.descripcion !== \"\");\r\n    let verifQty = varsOperatives.length ? varsOperatives.every(va => va.coeficiente !== \"\") : false; \r\n    let restOperatives = restricciones.filter(re => re.descripcion !== \"\");\r\n    let veriResQty = restOperatives.length ? restOperatives.every(re => re.coeficientes.every(co => co !== \"\") && re.derecha !== \"\"):false;\r\n    return (verifQty && veriResQty) ? true : false;\r\n  };\r\n\r\n  //Funcion de Calculo del modelo.\r\n  calculateResults = () => {\r\n    console.log('Calculating..');  \r\n    //Convertimos la App en Modelo para Solver.js\r\n    let model = convertAppToModelForSolverPrimal(this.props.status);\r\n\r\n    //solver.js soluciona y nos devuelve\r\n    return solver.Solve(model, false, true);\r\n  };\r\n\r\n  render() {\r\n    //Obtenemos el resultado almacenado\r\n    let { result } = this.state;\r\n    console.log(\"RESULTADOOOOOOO\");\r\n    console.log(result);\r\n    let printResults;\r\n    let existenCeros = false;\r\n    \r\n    \r\n    \r\n    if ( result.feasible ) {\r\n      //Esto voy a ocupar para preguntar si en la fila de Z hay algun cero quiere decir que existen multiples soluciones\r\n      //Esto es teniendo en cuenta que el metodo Solver solamente arma la tabla del Simplex con las columnas de las variables que NO ESTAN EN LA BASE \r\n      let {matrix} = result._tableau;     \r\n      existenCeros = matrix[0].some(current => current === 0); //Recorremos la fila de Z que seria la fila 0 en la matrix, y si existe algun cero ponemos true\r\n      //Obtenemos las Variables desde las props\r\n\r\n      let { variables, restricciones, method } = this.props.status;\r\n      if (method === \"simplex\") {\r\n        if (result.bounded) {\r\n            printResults = <SimplexPresentation variables={variables} restricciones={restricciones} result={result} />\r\n          } \r\n      }else{\r\n            printResults = <GraphicPresentation\r\n                variables={variables}\r\n                restricciones={restricciones}\r\n                graph={result.feasible}\r\n                result={ result.bounded ? result.solutionSet : {} }\r\n              />\r\n        }\r\n      }\r\n      \r\n    return (\r\n      <>\r\n        <Card outline color=\"info\" className=\"w-100 mt-3 mx-auto\">\r\n          <CardHeader>\r\n            <CardTitle>\r\n              <Row className=\"justify-content-center\">\r\n                <h3>\r\n                  {result.feasible\r\n                    ? result.bounded ? \"El resultado óptimo de la función objetivo es: \" + result.evaluation\r\n                      : \"Solucion no Acotada\"\r\n                    : \"Solución no Factible\" }\r\n                </h3>\r\n              </Row>\r\n              {existenCeros && <Row className=\"justify-content-center\"><h4><Badge pill color=\"info\">Existen soluciones multiples para este ejercicio</Badge></h4></Row>}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          {result.feasible && printResults}\r\n        </Card>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Presentation;\r\n","import React from \"react\";\r\nimport { Container, Col, Row, Progress } from \"reactstrap\";\r\nimport ModalModels from \"../../Models\"\r\nimport ReactWizard from \"react-bootstrap-wizard\";\r\nimport Configuration from \"../Configuration\";\r\nimport Processing from \"../Processing\";\r\nimport Presentation from \"../Presentation\";\r\n\r\n\r\nclass InSteps extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      model:{\r\n        variables: [{ xi: 0, descripcion: \"\", coeficiente: \"\" }, { xi: 1, descripcion: \"\", coeficiente: \"\" }],\r\n        restricciones: [{ ri: 0, descripcion: \"\", coeficientes: [], eq: \">=\", derecha: \"\" }],\r\n        method: \"graph\",\r\n        objective: \"max\",\r\n        integer: false\r\n      }, \r\n      result: false,\r\n      barProg: 33,\r\n      modelsOpen:false\r\n    };\r\n  }\r\n  //Esta función maneja el cambio en las restricciones\r\n  handleRestricciones = restricciones => {\r\n    let { model } = this.state;\r\n    model.restricciones = restricciones;\r\n    this.setState({ model, result: false });\r\n  };\r\n  //Esta función maneja el cambio en las variables\r\n  handleVariables = variables => {\r\n    let { model } = this.state;\r\n    model.variables = variables;\r\n    this.setState({ model, result: false });\r\n  };\r\n  //Esta función maneja el cambio del metodo\r\n  handleMethod = method => {\r\n    let { model } = this.state;\r\n    model.method = method;\r\n    this.setState({ model, result: false });\r\n  };\r\n  //Esta función maneja el cambio del objetivo de optimización\r\n  handleObjective = objective => {\r\n    let { model } = this.state;\r\n    model.objective = objective;\r\n    this.setState({ model, result: false });\r\n  };\r\n  toggleInteger = () => {\r\n    let { model } = this.state;\r\n    model.integer = !model.integer;\r\n    this.setState({ model, result: false });\r\n\r\n  }\r\n  //Esta función guarda el resultado (inutilizada por el momento)\r\n  handleResult = result => this.setState({ result });\r\n\r\n  //Esta función habilita el cálculo en el último paso\r\n  lastStep = step => {\r\n    if (step === 2) {\r\n      this.setState({ barProg: 100 });\r\n    } else {\r\n      this.setState({ barProg: 66 });\r\n    }\r\n  };\r\n\r\n  finishButtonClick = result => {\r\n    let {model} = this.state;\r\n      window.print()\r\n  };\r\n\r\n  showModels = () => this.setState({modelsOpen:!this.state.modelsOpen})\r\n\r\n  setModel = model => this.setState({ model })\r\n\r\n  render() {\r\n    let { modelsOpen,model} = this.state\r\n    var steps = [\r\n      // this step hasn't got a isValidated() function, so it will be considered to be true\r\n      {\r\n        stepName: \"Configuración del Modelo\",\r\n        component: Configuration,\r\n        stepProps: {\r\n          status: model,\r\n          loadExampleModel: this.loadExampleModel,\r\n          handleMethod: this.handleMethod,\r\n          handleVariables: this.handleVariables,\r\n          handleRestricciones: this.handleRestricciones,\r\n          lastStep: this.lastStep,\r\n          toggleInteger: this.toggleInteger,\r\n          handleObjective: this.handleObjective,\r\n          showModels:this.showModels\r\n        }\r\n      },\r\n      {\r\n        stepName: \"Detalles del Modelo\",\r\n        component: Processing,\r\n        stepProps: {\r\n          status: model,\r\n          handleVariables: this.handleVariables,\r\n          lastStep: this.lastStep,\r\n          handleRestricciones: this.handleRestricciones\r\n        }\r\n      },\r\n      {\r\n        stepName: \"Presentación de los Resultados\",\r\n        component: Presentation,\r\n        stepProps: {\r\n          status: model,\r\n          handleResult: this.handleResult,\r\n          lastStep: this.lastStep\r\n        }\r\n      }\r\n    ];\r\n    return (\r\n      <Container fluid className=\"App\">\r\n        <Row>\r\n          <Col xs={12} md={8} className=\"my-4 mx-auto\">\r\n            <ReactWizard\r\n              steps={steps}\r\n              title=\"Programación Lineal\"\r\n              progressbar\r\n              headerTextCenter\r\n              validate\r\n              color=\"blue\"\r\n              previousButtonText=\"Volver\"\r\n              nextButtonText=\"Siguiente\"\r\n              nextButtonClasses=\"bg-primary\"\r\n              finishButtonText=\"Imprimir Resultados\"\r\n              finishButtonClick={this.finishButtonClick}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row><ModalModels open={modelsOpen} model={model} setModel={this.setModel} handleClose={this.showModels}/></Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InSteps;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Button, Jumbotron, Container, Row, Col } from \"reactstrap\";\r\n\r\nconst NoLinealProgramming = () => {\r\n    return(\r\n    <Container fluid className=\"App\">\r\n      <Row className=\"\">\r\n        <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n          <Jumbotron className=\"\">\r\n            <Row>\r\n              <h2>La Programación No-Lineal aún no está disponible.</h2>\r\n            </Row>\r\n            <Row>\r\n                <Link to='/home'><Button className=\"fluid-left\">Volver</Button></Link>\r\n            </Row>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n    };\r\nexport default NoLinealProgramming;","import React, { useState } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Button, Jumbotron, Container, Row, Col, Tooltip, tolltipOpen} from \"reactstrap\";\r\nimport './index.css'\r\n\r\nimport {BsFillInfoSquareFill} from \"react-icons/bs\"\r\n\r\n\r\n\r\nconst StockProblems = () => {   \r\n  return(\r\n    <Container fluid className=\"App\">\r\n      <Row>\r\n        <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n          <Jumbotron>\r\n            <Row className=\"justify-content-center\">\r\n                <div className=\"text-center\">\r\n                    <h2>PROBLEMAS DE INVENTARIO</h2>\r\n                    <h4>¿Qué modelo desea?</h4>\r\n                </div>\r\n            </Row>\r\n            <Row className=\"mt-3 mx-auto\">\r\n              <Col>\r\n                <Link to={\"/StockProblems/CantidadEconomicaPedido\"}>\r\n                    <Button size='lg' outline color=\"success\">Cantidad Economica de Pedido - Taha</Button>\r\n                </Link>\r\n                <Link to={\"/StockProblems/CantidadEconomicaPedido/info.js\"} >\r\n                  <BsFillInfoSquareFill color='info' style={{color:'#17A2B8', marginLeft:10, fontSize:30}}></BsFillInfoSquareFill>\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-3 mx-auto\">\r\n              <Col>\r\n                 <Link to={\"/StockProblems/ModeloWilson\"} >\r\n                    <Button size='lg' outline color=\"success\">Modelo Wilson - Sturla</Button>\r\n                </Link>\r\n                <Link to={\"/StockProblems/ModeloWilson/info.js\"} >\r\n                  <BsFillInfoSquareFill color='info' style={{color:'#17A2B8', marginLeft:10, fontSize:30}}></BsFillInfoSquareFill>\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-3 mx-auto\">\r\n              <Col>\r\n                <Link to={\"/StockProblems/ModeloStockProteccion\"} >\r\n                      <Button size='lg' outline color=\"success\">Modelo con stock de proteccion</Button>\r\n                </Link>\r\n                <Link to={\"/StockProblems/ModeloStockProteccion/info.js\"} >\r\n                  <BsFillInfoSquareFill color='info' style={{color:'#17A2B8', marginLeft:10, fontSize:30}}></BsFillInfoSquareFill>\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-3 mx-auto\">\r\n              <Col>\r\n                <Link to={\"/StockProblems/ModeloAgotamientoAdmitido\"} >\r\n                    <Button size='lg' outline color=\"success\">Modelo con Agotamiento</Button>\r\n                </Link>\r\n                <Link to={\"/StockProblems/ModeloAgotamientoAdmitido/info.js\"} >\r\n                  <BsFillInfoSquareFill color='info' style={{color:'#17A2B8', marginLeft:10, fontSize:30}}></BsFillInfoSquareFill>\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-3 mx-auto\">\r\n              <Col>\r\n                <Link to={\"/StockProblems/ModeloTriangular\"} >\r\n                    <Button size='lg' outline color=\"success\">Modelo Triangular</Button>\r\n                </Link>\r\n                <Link to={\"/StockProblems/ModeloTriangular/info.js\"} >\r\n                  <BsFillInfoSquareFill color='info' style={{color:'#17A2B8', marginLeft:10, fontSize:30}}></BsFillInfoSquareFill>\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-3 mx-auto\">\r\n              <Col>\r\n                <Link to={\"/StockProblems/ModelStockDiscontinuidadDePrecio\"} >\r\n                    <Button size='lg' outline color=\"success\">Modelo stock discontinuidad del precio</Button>\r\n                </Link>\r\n                <Link to={\"/StockProblems/ModelStockDiscontinuidadDePrecio/info.js\"}>\r\n                  <BsFillInfoSquareFill color='info' style={{color:'#17A2B8', marginLeft:10, fontSize:30}}></BsFillInfoSquareFill>\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-3 mx-auto\">\r\n              <Col>\r\n                <Link to={\"StockProblems/modeloSimpleSinAgotamiento\"} >\r\n                    <Button size='lg' outline color=\"success\">Modelo simple sin Agotamiento [WIP]</Button>\r\n                </Link>\r\n                <Link to={\"StockProblems/modeloSimpleSinAgotamiento/info.js\"} >\r\n                    <BsFillInfoSquareFill color='info' style={{color:'#17A2B8', marginLeft:10, fontSize:30}}></BsFillInfoSquareFill>\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"btn-volver justify-content-center\">\r\n                <Link to='/home'><Button>Volver</Button></Link>\r\n            </Row>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n    };\r\nexport default StockProblems;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Button, Jumbotron, Container, Row, Col } from \"reactstrap\";\r\n\r\nconst LinealProgramming = () =>{\r\n    return(\r\n        <Container fluid className=\"App\">\r\n        <Row className=\"\">\r\n            <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n                <Jumbotron>\r\n                    <Row>\r\n                        <h2 className=\"mx-auto\">¡Bien!, Ahora Seleccione una Modalidad de Trabajo.</h2>\r\n                    </Row>\r\n                    <Row className=\"mt-3 mx-auto\">\r\n                        <Col>\r\n                            <Link to={\"/LinealProgramming/InSteps\"}>\r\n                                <Button size='lg' outline color=\"success\">Guiado por Pasos</Button>\r\n                            </Link>\r\n                                \r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mt-3 mx-auto\">\r\n                        <Col>\r\n                            <Link to={\"/LinealProgramming/SinglePage\"} >\r\n                                <Button size='lg' outline color=\"success\">En Unica Pagina</Button>\r\n\r\n                            </Link>\r\n                        </Col>\r\n                    </Row>\r\n                </Jumbotron>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default LinealProgramming;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Button, Jumbotron, Container, Row, Col, ButtonGroup, UncontrolledTooltip } from \"reactstrap\";\r\n\r\nconst Inicio = () =>{\r\n    return(\r\n        <Container fluid className=\"App\">\r\n        <Row className=\"\">\r\n            <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n                <Jumbotron>\r\n                    <Row>\r\n                        <h2 className=\"mx-auto\">¡Bienvenido! Seleccione una opción.</h2>\r\n                    </Row>\r\n                    <Row className=\"mt-3 mx-auto\">\r\n                        <Col>\r\n                            <Link to={\"/LinealProgramming\"}>\r\n                                <Button size='lg' outline color=\"success\">Programación Lineal </Button>\r\n                            </Link>\r\n                        </Col>\r\n                    </Row>\r\n                    \r\n                    <Row className=\"mt-3 mx-auto\">\r\n                        <Col>\r\n                            <Link to={\"/NoLinealProgramming\"}>\r\n                                <Button size='lg' outline color=\"success\">Programación No Lineal </Button>\r\n                            </Link>     \r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"mt-3 mx-auto\">\r\n                        <Col>\r\n                            <Link to={\"/StockProblems\"}>\r\n                                <Button size='lg' outline color=\"success\">Problemas de Inventario</Button>\r\n                            </Link>     \r\n                        </Col>\r\n                    </Row>\r\n                    \r\n                    <Row className=\"mt-5\">\r\n                        <h5>Colaboradores:</h5>\r\n                    </Row>\r\n                    <Row>\r\n                        <ButtonGroup className=\"mx-auto\">\r\n                            <UncontrolledTooltip target='btnce'>Alegre, Nicolas</UncontrolledTooltip>\r\n                            <Button id='btnce' outline tag=\"a\" href=\"https://github.com/nicmalegre\">\r\n                                AN\r\n                            </Button>\r\n                            <UncontrolledTooltip target='btnce1'>Lopez, Soto Carlos</UncontrolledTooltip>\r\n                            <Button id='btnce1' outline tag=\"a\" href=\"https://github.com/Carloslopezsoto\">\r\n                                CLS\r\n                            </Button>\r\n                            <UncontrolledTooltip target='btnzs'>Zaracho Simonetto, Carlos Santino</UncontrolledTooltip>\r\n                            <Button id='btnzs' outline tag=\"a\" href=\"https://github.com/santinozaracho\">\r\n                                ZS\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Row>\r\n                    <Row className=\"mt-3\">\r\n                        <Col>\r\n                            <Button href=\"https://github.com/santinozaracho/optimizer-pl-io/issues\" \r\n                                outline>\r\n                                <img height='25px' src=\"https://img.icons8.com/ios-filled/50/000000/github.png\"/>\r\n                                Report Issues\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                        <Button href=\"mailto:carlosszaracho@gmail.com\" outline>Contact Us</Button>\r\n                        </Col>  \r\n                    </Row>\r\n                </Jumbotron>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default Inicio;","import React from \"react\";\r\nimport { Container, Col, Row, Jumbotron} from \"reactstrap\";\r\nimport ModalModels from \"../../Models\"\r\nimport Configuration from \"../Configuration\";\r\nimport Processing from \"../Processing\";\r\nimport Presentation from \"../Presentation\";\r\nimport logo from \"../logo.svg\";\r\n\r\nclass SinglePage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      model:{\r\n        variables: [{ xi: 0, descripcion: \"\", coeficiente: \"\" }, { xi: 1, descripcion: \"\", coeficiente: \"\" }],\r\n        restricciones: [{ ri: 0, descripcion: \"\", coeficientes: [], eq: \">=\", derecha: \"\" }],\r\n        method: \"graph\",\r\n        objective: \"max\",\r\n        integer: false\r\n      },\r\n      result: true,\r\n      modelsOpen:false\r\n    };\r\n  }\r\n\r\n  //Esta función maneja el cambio en las restricciones\r\n  handleRestricciones = restricciones => {\r\n    let { model } = this.state;\r\n    model.restricciones = restricciones;\r\n    this.setState({ model, changes: true });\r\n  };\r\n  //Esta función maneja el cambio en las variables\r\n  handleVariables = variables => {\r\n    let { model } = this.state;\r\n    model.variables = variables;\r\n    this.setState({ model, changes: true });\r\n  };\r\n  //Esta función maneja el cambio del metodo\r\n  handleMethod = method => {\r\n    let { model } = this.state;\r\n    model.method = method;\r\n    this.setState({ model, changes: true });\r\n  };\r\n  //Esta función maneja el cambio del objetivo de optimización\r\n  handleObjective = objective => {\r\n    let { model } = this.state;\r\n    model.objective = objective;\r\n    this.setState({ model, changes: true });\r\n  };\r\n  toggleInteger = () => {\r\n    let { model } = this.state;\r\n    model.integer = !model.integer;\r\n    this.setState({ model, changes: true });\r\n\r\n  }\r\n  //Esta función guarda el resultado (inutilizada por el momento)\r\n  handleResult = result => this.setState({ result });\r\n  //Esta función habilita el cálculo en el último paso\r\n  lastStep = step => console.log('Changes')\r\n  \r\n  finishButtonClick = result => console.log(\"En algún momento va a imprimir resultados\");\r\n\r\n  showModels = () => this.setState({modelsOpen:!this.state.modelsOpen});\r\n\r\n  setModel = model => this.setState({ model, changes:true });\r\n\r\n  render() {\r\n    let { modelsOpen, model, result } = this.state\r\n    console.log('PRESENTATION:'+result);\r\n    \r\n    return (\r\n      <Container fluid className=\"App\">\r\n        <Row className=\"\">\r\n          <Col xs={12} md={6} className=\"mx-auto\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" height=\"200\" />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={12} md={6} className=\"my-4 mx-auto \">\r\n            <Row>\r\n                <Jumbotron className='w-100'>\r\n                    <Configuration   status={model}\r\n                    handleMethod={this.handleMethod}\r\n                    handleVariables={this.handleVariables}\r\n                    handleRestricciones={this.handleRestricciones}\r\n                    lastStep={this.lastStep}\r\n                    toggleInteger={this.toggleInteger}\r\n                    handleObjective={this.handleObjective}\r\n                    showModels={this.showModels}/>\r\n                </Jumbotron>  \r\n            </Row>\r\n\r\n            <Row>\r\n                <Jumbotron className='w-100'>\r\n                    <Processing status={model} handleVariables={this.handleVariables}\r\n                    handleRestricciones={this.handleRestricciones} lastStep={this.lastStep}/>\r\n                </Jumbotron>\r\n                \r\n            </Row>\r\n\r\n            <Row>\r\n                <Jumbotron className='w-100'>\r\n                    <Presentation status={model} handleResult={this.handleResult} lastStep={this.lastStep}/>\r\n                </Jumbotron>\r\n            </Row>\r\n          \r\n          </Col>\r\n        </Row>\r\n        <Row><ModalModels open={modelsOpen} model={model} setModel={this.setModel} handleClose={this.showModels}/></Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SinglePage;\r\n","import React from 'react';\r\nimport {XYPlot, XAxis, YAxis, HorizontalGridLines,LineSeries, VerticalGridLines} from 'react-vis';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\n\r\nconst Graph = ({ y, yProm, t, title, sr, puntoDeReorden }) => {\r\n  if (!sr){\r\n    sr = 0\r\n  }\r\n  if (!puntoDeReorden){\r\n    puntoDeReorden = 0\r\n  }\r\n  let line = [{x:0,y:0},{x:0,y},{x:t,y:sr},{x:t,y},{x:(2*t),y:sr},{x:(2*t),y},{x:(3*t),y:sr},{x:(3*t),y},{x:(4*t),y:sr},{x:(4*t),y},{x:(5*t),y:sr},{x:(5*t),y}]\r\n  let linePromedio = [{x:0,y:yProm},{x:(5*t),y:yProm}]\r\n  let linePuntoDeReorden = [{x:0,y:puntoDeReorden},{x:(5*t),y:puntoDeReorden}]\r\n  return (\r\n  <Container>\r\n    <Row className=\"justify-content-center\" style={{margin:0}}>\r\n      <h2>{title}</h2>\r\n      <XYPlot width={500} height={500}>\r\n          <HorizontalGridLines/>\r\n          <VerticalGridLines/>\r\n          \r\n          <XAxis title='Tiempo' />\r\n          <YAxis title='Inventario'/>\r\n          <LineSeries color='black' data={line}/>\r\n          <LineSeries strokeStyle=\"dashed\" data={linePromedio}/>\r\n          <LineSeries color=\"blue\" strokeStyle=\"dashed\" data={linePuntoDeReorden}/>\r\n      </XYPlot>\r\n    </Row>\r\n  </Container>\r\n  )\r\n}\r\nexport default Graph;","import React from \"react\";\r\nimport { Button, Container, Row, Col, Card,Jumbotron} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,CardText,Table} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css';\r\nimport Graph from \"../Graph\";\r\n\r\n\r\n\r\n\r\n\r\nclass CantidadEconomicaPedido extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            demanda: null, //D\r\n            costoDePreparacion: null, //K\r\n            costoDeAlmacenamiento: null,//h\r\n            tiempoDeEntrega:null,//L\r\n            politica:null,// establece que politica usar\r\n            unidadCostoDeAlmacenamiento:1, //ESTA NO ESTAMOS OCUPANDO POR EL MOMENTO\r\n            unidadesAlmacenamiento: null,\r\n            unidadesDemanda:null,\r\n            longitudCiclo:null, //t*\r\n            cantidadEconomica:null, //y*\r\n            mostrarResultados: false,\r\n            inputUpdated: false,\r\n            incompleto: false,\r\n            puntoDeReorden: null,\r\n            TCU: null,      \r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){ //Para comparar mi estado actual con el estado anterior. Verificamos si se actualizo algun campo de los input.\r\n        if(this.state.inputUpdated){\r\n            this.setState({inputUpdated:false})\r\n            this.controlarCambio();\r\n            \r\n        } \r\n    }\r\n\r\n    handleInputChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            inputUpdated: true,\r\n        })\r\n    }\r\n    \r\n    //SI HUBO CAMBIOS QUE DESAPAREZCA LA VENTANA QUE MUESTRA LOS RESULTADOS\r\n    controlarCambio = () => { \r\n        this.setState({mostrarResultados:false})\r\n    }\r\n    \r\n    //CALCULAR t0*\r\n    calcularLongitud(cantidadEconomic){\r\n        let {demanda, cantidadEconomica} = this.state\r\n       \r\n        if (cantidadEconomic){\r\n            cantidadEconomica = cantidadEconomic \r\n            console.log(\"Cantidad economica\")\r\n        }\r\n        this.setState({longitudCiclo:(Number(cantidadEconomica)/Number(demanda))}); //to*\r\n        \r\n    }\r\n    \r\n    //CALCULAR y*\r\n    calcularInventarioOptimoEcuacionSimple(){\r\n        let {demanda, longitudCiclo} = this.state;\r\n        this.setState({cantidadEconomica: (demanda*longitudCiclo)});\r\n    }\r\n\r\n    //CALCULAR D\r\n    calcularDemandaEcuacionSimple(){\r\n        let {cantidadEconomica, longitudCiclo} = this.state;\r\n        this.setState({demanda: (cantidadEconomica/longitudCiclo)});\r\n    }\r\n\r\n    //CALCULAR y* PERO CON LA OTRA FORMULA (la formula de la raiz con K,D, h)\r\n    calcularInventarioOptimo(){ \r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento, unidadCostoDeAlmacenamiento} = this.state;\r\n        let cantidadEconomica = (Math.sqrt((2*Number(costoDePreparacion)*Number(demanda))/(Number(costoDeAlmacenamiento)*unidadCostoDeAlmacenamiento)))\r\n        this.setState({cantidadEconomica}); //y*\r\n        return cantidadEconomica;\r\n    }\r\n\r\n    //CALCULAR h\r\n    calcularCostoAlmacenamiento(){\r\n        let {demanda, costoDePreparacion, cantidadEconomica} = this.state;\r\n        this.setState({costoDeAlmacenamiento:((2*Number(costoDePreparacion)*Number(demanda)/Math.pow(Number(cantidadEconomica),2)))}); //h\r\n    }\r\n    \r\n    //CALCULAR D PERO CON LA OTRA FORMULA (la formula de la raiz con h, y*, k)\r\n    calcularDemanda(){\r\n        let {costoDePreparacion, costoDeAlmacenamiento, cantidadEconomica} = this.state;\r\n        this.setState({demanda:( (Number(costoDeAlmacenamiento)*Math.pow(Number(cantidadEconomica),2))/ 2*Number(costoDePreparacion) ) }); //D\r\n\r\n    }\r\n\r\n    //CALCULAR K\r\n    calcularCostoPorPedido(){\r\n        let {demanda, costoDeAlmacenamiento, cantidadEconomica} = this.state;\r\n        this.setState({costoDePreparacion:( (Number(costoDeAlmacenamiento)*Math.pow(Number(cantidadEconomica),2))/ 2*Number(demanda) ) }); //D\r\n        \r\n    }\r\n\r\n\r\n    //CALCULAR TCU(y)\r\n    calcularCostoInventario()\r\n    {\r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento,unidadCostoDeAlmacenamiento, cantidadEconomica} = this.state;\r\n        let promedioInventario = (cantidadEconomica / 2);\r\n        this.setState({TCU: ((Number(costoDePreparacion)/(Number(cantidadEconomica) /Number(demanda)))+ (Number(costoDeAlmacenamiento)*Number(unidadCostoDeAlmacenamiento)*promedioInventario))}); //TCL(y)\r\n    }\r\n\r\n    \r\n    calcularPuntoDeReorden(){\r\n        let {demanda,politica,tiempoDeEntrega, longitudCiclo} = this.state;\r\n        \r\n        if(tiempoDeEntrega > longitudCiclo){ //SI L > to*, calculamos Le\r\n        //para politica 1 \r\n            let n = Math.trunc(tiempoDeEntrega/longitudCiclo);//n\r\n            let tiempoEfectivoDeEntrega= tiempoDeEntrega - (n * longitudCiclo);//Le\r\n            this.setState({puntoDeReorden: (tiempoEfectivoDeEntrega * demanda)});//punto de reorden\r\n        }else{\r\n            //para politica 2\r\n            this.setState({puntoDeReorden: (tiempoDeEntrega * demanda)})\r\n        }\r\n    }\r\n\r\n\r\n    mostrarResultados = () => {\r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento, tiempoDeEntrega,longitudCiclo, cantidadEconomica, mostrarResultados} = this.state;\r\n        let combinacion1 = [cantidadEconomica, demanda] //Calculamos longitudCiclo\r\n        let combinacion2 = [longitudCiclo, demanda] //Calculamos cantidadEconomica\r\n        let combinacion3 = [cantidadEconomica, longitudCiclo] //Calculamos demanda con ecuacion simple\r\n\r\n        let control1 = combinacion1.every(caso => caso); //Si devuelve true es porque todos los elementos del arreglo estan cargados \r\n        let control2 = combinacion2.every(caso => caso);\r\n        let control3 = combinacion3.every(caso => caso);\r\n        \r\n        let combinacion4 = [demanda,costoDePreparacion,costoDeAlmacenamiento] //Calculamos cantidadEconomica y*\r\n        let combinacion5 = [demanda,costoDePreparacion,cantidadEconomica] //Calculamos costoDeAlmacenamiento h\r\n        let combinacion6 = [costoDeAlmacenamiento,costoDePreparacion,cantidadEconomica] //Calculamos demanda D\r\n        let combinacion7 = [demanda,costoDeAlmacenamiento,cantidadEconomica] //Calculamos costoDePreparacion k\r\n        let control4 = combinacion4.every(caso => caso); //Si devuelve true es porque todos los elementos del arreglo estan cargados \r\n        let control5 = combinacion5.every(caso => caso);\r\n        let control6 = combinacion6.every(caso => caso);\r\n        let control7 = combinacion7.every(caso => caso);\r\n\r\n\r\n        if((control4 || control5 || control6 || control7) && tiempoDeEntrega){\r\n            if(control1){ //CON ESTOS IF CONTROLAMOS LOS CALCULOS PARA LA PRIMER ECUACION\r\n                //Como aca tendriamos que calcular longitud, o sea t0, como siempre necesitamos calcularlo lo sacamos de aca y pusimos abajo afuera del if               \r\n            } else if (control2){\r\n                this.calcularInventarioOptimoEcuacionSimple()\r\n                \r\n            } else if(control3){\r\n                this.calcularDemandaEcuacionSimple()    \r\n            }\r\n    \r\n            if(control4){\r\n                let cantidadEconomic = this.calcularInventarioOptimo();\r\n                this.calcularLongitud(cantidadEconomic)   \r\n            }else if (control5){\r\n                this.calcularCostoAlmacenamiento()\r\n               \r\n            }else if(control6){\r\n                this.calcularDemanda()\r\n                \r\n            }else if (control7){\r\n                this.calcularCostoPorPedido()\r\n                \r\n            }\r\n            \r\n            setTimeout(() => {\r\n                this.calcularLongitud()\r\n                this.calcularCostoInventario();\r\n                this.calcularPuntoDeReorden();\r\n            }, 1);\r\n            \r\n            this.setState({mostrarResultados: true})\r\n            this.setState({incompleto: false})\r\n\r\n        }else{\r\n            this.setState({incompleto:true})\r\n        } \r\n               \r\n    }\r\n\r\n    render() { \r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento, tiempoDeEntrega,unidadesDemanda, unidadesAlmacenamiento, incompleto} = this.state;\r\n        let {mostrarResultados, cantidadEconomica, longitudCiclo, puntoDeReorden, TCU} = this.state;\r\n        //let costo = this.calcularCosto();\r\n        \r\n\r\n        //AGREGAMOS ESTA FUNCION PARA CONTROLAR QUE DEPENDIENDO DEL TIPO DE POLITICA IMPRIMA UNA COSA O LA OTRA\r\n        let controlarPolitica = (tiempoDeEntrega > longitudCiclo) ? (\r\n        <Col>\r\n            <Card body inverse color=\"primary\" style={{marginTop:10, padding: '5px 0 0 0'}}>\r\n                <CardText>\r\n                <h5>Pedir {Number(cantidadEconomica).toFixed(2)} {unidadesDemanda} cuando el inventario baje de {Number(puntoDeReorden).toFixed(2)} {unidadesDemanda}</h5>\r\n                </CardText>\r\n            </Card>   \r\n        </Col>) : //Si no\r\n        (\r\n            <Col>\r\n                <Card body inverse color=\"primary\" style={{marginTop:10, padding: '5px 0 0 0'}}>\r\n                    <CardText>\r\n                        <h5>Pedir {Number(cantidadEconomica).toFixed(2)} {unidadesDemanda} cada {Number(longitudCiclo).toFixed(2)} {unidadesAlmacenamiento}</h5>\r\n                    </CardText>\r\n                </Card>   \r\n            </Col>\r\n        )\r\n        \r\n\r\n        \r\n        return (\r\n            <Container fluid className=\"App\"> \r\n            <Row>\r\n              <Col xs={12} md={8} className=\"my-4 mx-auto\">\r\n                <Jumbotron>\r\n                    <Col>\r\n                        <h2>Modelo clasico con cantidad economica de pedido</h2><br></br>                   \r\n                    </Col>\r\n                    <Col> \r\n                        <InputGroup className=\"mt-3\" id={\"demanda\"} key={\"demanda\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"D\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-demanda\"\r\n                            name={\"demanda\"}\r\n                            value={demanda}\r\n                            placeholder=\"Ingresar la demanda\"\r\n                            aria-label=\"Demanda\"\r\n                            aria-describedby=\"demanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            <InputGroupAddon className=\"input-unidades\" addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-unidadesDemanda\"\r\n                            name={\"unidadesDemanda\"}\r\n                            placeholder=\"Ingresar las unidades de demanda\"\r\n                            aria-label=\"UnidadDemanda\"\r\n                            aria-describedby=\"unidadDemanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\" id={\"costoDePreparacion\"} key={\"costoDePreparacion\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"K\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDePreparacion\"}\r\n                            value={costoDePreparacion}\r\n                            placeholder=\"Ingresar el costo por pedido\"\r\n                            aria-label=\"costoDePreparacion\"\r\n                            aria-describedby=\"costoDePreparacion\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            \r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\" id={\"costoDeAlmacenamiento\"} key={\"costoDeAlmacenamiento\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"h\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText >{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDeAlmacenamiento\"}\r\n                            value={costoDeAlmacenamiento}\r\n                            placeholder=\"Ingresar el costo de almacenamiento\"\r\n                            aria-label=\"costoDePreparacion\"\r\n                            aria-describedby=\"costoDePreparacion\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            \r\n                            \r\n                            <InputGroupAddon className=\"unidadesAlmacenamiento\" addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"\"\r\n                            name={\"unidadesAlmacenamiento\"}\r\n                            placeholder=\"Ingresar las unidades de tiempo\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        \r\n                        \r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\" id={\"tiempoDeEntrega\"} key={\"tiempoDeEntrega\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText name=\"tiempoDeEntrega\" id=\"tiempoDeEntrega\">\r\n                                <b>{\"L\"}</b>\r\n                            </InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"tiempoDeEntrega\"}\r\n                            value={tiempoDeEntrega}\r\n                            placeholder=\"Ingresar el tiempo de entrega\"\r\n                            aria-label=\"tiempoDeEntrega\"\r\n                            aria-describedby=\"tiempoDeEntrega\"\r\n                            onChange={this.handleInputChange}\r\n                            />                        \r\n                        </InputGroup>\r\n                    </Col>\r\n                    \r\n                    \r\n                    {mostrarResultados && (    //Si mostrarResultados esta en true que quiere decir que apreto el boton\r\n                                                          \r\n                    <Col>\r\n                        <Row>\r\n                            <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333', margin: 15}}>\r\n                                <CardText>\r\n                                <Table dark className=\"text-center\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Variable</th>\r\n                                                <th>Nombre Variable</th>\r\n                                                <th className=\"text-left\"><b>Resultado</b></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>t0*</td>\r\n                                                <td>Longitud del Ciclo</td>\r\n                                                <td className=\"text-left\"><b>{Number(longitudCiclo).toFixed(2)} {unidadesAlmacenamiento}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>y*</td>\r\n                                                <td>Cantidad Economica</td>\r\n                                                <td className=\"text-left\"><b>{Number(cantidadEconomica).toFixed(2)} {unidadesDemanda}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td></td>\r\n                                                <td>Punto de Reorden</td>\r\n                                                <td className=\"text-left\"><b>{Number(puntoDeReorden).toFixed(2)} {unidadesDemanda}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>TCU(y)</td>\r\n                                                <td>Costo de Inventario</td>\r\n                                                <td className=\"text-left\"><b>${Number(TCU).toFixed(2)}</b></td>\r\n                                            </tr>\r\n                                            \r\n                                        </tbody>\r\n                                    </Table>\r\n                                    {controlarPolitica}\r\n                                </CardText>\r\n                            </Card> \r\n                        </Row>\r\n                        <Row className=\"justify-content-end\" style={{justifyContent:\"center\"}}>\r\n                            <Col>\r\n                                <Card body>\r\n                                    <Graph y={cantidadEconomica} t={longitudCiclo} puntoDeReorden={puntoDeReorden} yProm={Number(cantidadEconomica)/2} title={'Grafico CEP'}/>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>  \r\n                    </Col>)}\r\n                           \r\n                    {incompleto && (\r\n                    <Card className=\"card-incompleto\" body inverse color=\"danger\" style={{padding: '0 0 0 0', marginTop:10}}>\r\n                        <CardText>Complete más campos para poder continuar y luego presione calcular.</CardText>\r\n                    </Card>)}\r\n                    \r\n                    \r\n                    <Row className=\"btn-volver justify-content-center\">\r\n                        <Link to='./'><Button>Volver</Button></Link>\r\n                        <Button className=\"btn-Calcular\" color=\"success\" onClick={this.mostrarResultados}>Calcular</Button>\r\n                    </Row>\r\n                </Jumbotron>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default CantidadEconomicaPedido;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText, UncontrolledPopover} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\n\r\n\r\n\r\nconst info = () => {\r\n    return(\r\n    <Container fluid className=\"App\">\r\n      <Row>\r\n        <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n          <Jumbotron>\r\n            <Row className=\"justify-content-center\">\r\n                <div>\r\n                    <h2>Modelo cantidad economica de pedido</h2><br></br>\r\n                </div>\r\n            </Row>\r\n            \r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\" >\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Hipotesis</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li>No tenemos en cuenta si contamos o no con los recursos financieros</li>\r\n                        <li>No hay inflasión</li>\r\n                        <li>No se permiten faltantes</li>\r\n                        <li>Demanda constante y conocida.</li>\r\n                        <li>Resposición instantánea.</li>\r\n                        <li>Costo unitario de almacenamiento por unidad de tiempo h, constante.</li>\r\n                        <li>Costo de preparacion 𝑘, constante.</li>\r\n                        <li>No existen otros costos.</li>\r\n                        <li>Al comienzo de cada periodo no hay stock ni pedidos insatisfechos.</li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Variables</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li><b>D: </b>Demanda</li>\r\n                        <li><b>K: </b>Costo de preparacion</li>\r\n                        <li><b>h: </b>Costo de almacenamiento</li>\r\n                        <li><b>L: </b>Tiempo de entrega</li>\r\n                        <li><b>t0*: </b>Longitud de ciclo</li>\r\n                        <li><b>y*: </b>Cantidad economica</li>  \r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row className=\"justify-content-left\">\r\n                <Card body outline color=\"secondary\">\r\n                    <CardTitle><b>Bibliografia</b></CardTitle>\r\n                    <CardText>TAHA HAMDY A., “Investigación de Operaciones”, EDITORIAL Pearson Prentice Hall, 2004 </CardText>\r\n                </Card>\r\n            </Row>\r\n            \r\n            \r\n            <Row className=\"btn-volver justify-content-center\">\r\n                <Link to='/StockProblems'><Button>Volver</Button></Link>\r\n            </Row>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n    };\r\nexport default info;","import React from \"react\";\r\nimport { Button, Container, Row, Col, Card,Jumbotron} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,CardText, Table} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport Graph from \"../Graph\";\r\n\r\n\r\n\r\nclass ModeloWilson extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            demanda: null, //D\r\n            costoDePreparacion: null, //K\r\n            costoDePreparacionTotal: null,\r\n            costoDeAlmacenamiento: null,//c1\r\n            costoDeAlmacenamientoTotal: null,\r\n            costoDeProducto: null, //b\r\n            costoDeProductoTotal: null,\r\n            unidadesAlmacenamiento: null,\r\n            unidadesDemanda:null,\r\n            loteOptimo:null, //q\r\n            tiempoEntrePedidos: null, //t0\r\n            mostrarResultados: false,\r\n            inputUpdated: false,\r\n            incompleto: false,\r\n            CTE: null,\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){ //Para comparar mi estado actual con el estado anterior. Verificamos si se actualizo algun campo de los input.\r\n        if(this.state.inputUpdated){\r\n            this.setState({inputUpdated:false})\r\n            this.controlarCambio();\r\n            \r\n        } \r\n    }\r\n\r\n    handleInputChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            inputUpdated: true,\r\n        })\r\n    }\r\n\r\n    //SI HUBO CAMBIOS QUE DESAPAREZCA LA VENTANA QUE MUESTRA LOS RESULTADOS\r\n    controlarCambio = () => { \r\n        this.setState({mostrarResultados:false})\r\n    }\r\n    \r\n    //CALCULAR q0\r\n    calcularLoteOptimo() {\r\n        let {costoDePreparacion, demanda, costoDeAlmacenamiento} = this.state;\r\n        let loteOptimo\r\n        loteOptimo = (Math.sqrt((2*Number(costoDePreparacion)*Number(demanda))/(Number(costoDeAlmacenamiento))));\r\n        \r\n        if (loteOptimo>demanda){ //Si el q0 calculado es mas grande que la demanda entonces como lote optimo va la demanda\r\n            this.setState({loteOptimo: demanda})\r\n        }else{\r\n            this.setState({loteOptimo})\r\n        }\r\n    }\r\n\r\n    //CALCULAR t0\r\n    calcularTiempoEntrePedidos(){\r\n        let {costoDePreparacion, demanda, costoDeAlmacenamiento} = this.state\r\n        this.setState({tiempoEntrePedidos: (Math.sqrt(2*Number(costoDePreparacion)/ ((Number(demanda))*(Number(costoDeAlmacenamiento))))) })\r\n        \r\n\r\n    }\r\n\r\n    //CALCULAR COSTO DE PREPARACION TOTAL\r\n    calcularCostoPreparacionTotal(){\r\n        let {demanda, loteOptimo, costoDePreparacion} = this.state;\r\n        this.setState({costoDePreparacionTotal: ((Number(demanda)/Number(loteOptimo))*Number(costoDePreparacion)) })\r\n    }\r\n\r\n    //CALCULAR COSTO DEL PRODUCTO TOTAL\r\n    calcularCostoProductoTotal(){\r\n        let {costoDeProducto, demanda} = this.state;\r\n        this.setState({costoDeProductoTotal: (Number(costoDeProducto)*Number(demanda)) })\r\n    }\r\n\r\n    //CALCULAR COSTO TOTAL DE ALMACENAMIENTO\r\n    calcularCostoAlmacenamientoTotal(){\r\n        let {loteOptimo, costoDeAlmacenamiento} = this.state;\r\n        this.setState({costoDeAlmacenamientoTotal: ((1/2)*Number(loteOptimo)*Number(costoDeAlmacenamiento)) })\r\n    }\r\n\r\n    //CALCULAR CTE \r\n    calcularCTE(){\r\n        let {costoDeProducto, costoDeAlmacenamiento, demanda} = this.state\r\n        let bD, raiz2TDKC1\r\n        bD = (Number(costoDeProducto)*Number(demanda))\r\n        raiz2TDKC1 = ( Math.sqrt(2*Number(demanda)*Number(costoDeProducto)*Number(costoDeAlmacenamiento)) )\r\n        this.setState({CTE: (bD + raiz2TDKC1)})\r\n    }\r\n\r\n\r\n    mostrarResultados = () => {\r\n        \r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento, costoDeProducto} = this.state;\r\n        let combinacion1 = [demanda, costoDePreparacion, costoDeAlmacenamiento, costoDeProducto] //Cargamos un arreglo\r\n        let control1 = combinacion1.every(caso => caso); //Si devuelve true es porque todos los elementos del arreglo estan cargados \r\n        \r\n        if (control1){ //SI TODOS LOS CAMPOS ESTAN CARGADOS ENTONCES CALCULO TODO Y MUESTRO\r\n            this.calcularLoteOptimo()\r\n            this.calcularTiempoEntrePedidos()\r\n        \r\n            setTimeout(() => {\r\n                this.calcularCostoPreparacionTotal()\r\n                this.calcularCostoProductoTotal()\r\n                this.calcularCostoAlmacenamientoTotal()\r\n                this.calcularCTE()\r\n            }, 1);\r\n\r\n            this.setState({mostrarResultados: true})\r\n            this.setState({incompleto: false})\r\n\r\n        }else{\r\n            this.setState({incompleto:true}) //PONGO A INCOMPLETO EN TRUE Y MUESTRO LA ALERTA DE COMPLETAR CAMPOS\r\n        }\r\n        \r\n        \r\n                 \r\n    }\r\n\r\n    render() { \r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento,unidadesDemanda, loteOptimo, unidadesAlmacenamiento, incompleto} = this.state;\r\n        let {costoDeProducto, costoDeProductoTotal, costoDePreparacionTotal, costoDeAlmacenamientoTotal, CTE, mostrarResultados, tiempoEntrePedidos} = this.state;\r\n \r\n        \r\n        return (\r\n            <Container fluid className=\"App\"> \r\n            <Row>\r\n              <Col xs={12} md={8} className=\"my-4 mx-auto\">\r\n                <Jumbotron>\r\n                    <Col>\r\n                        <h2>Modelo Wilson</h2><br></br>                   \r\n                    </Col>\r\n                    \r\n                    <Col> \r\n                        <InputGroup className=\"mt-3\" id={\"demanda\"} key={\"demanda\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"D\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-demanda\"\r\n                            name={\"demanda\"}\r\n                            value={demanda}\r\n                            placeholder=\"Ingresar la demanda\"\r\n                            aria-label=\"Demanda\"\r\n                            aria-describedby=\"demanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            <InputGroupAddon className=\"input-unidades\" addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-unidadesDemanda\"\r\n                            name={\"unidadesDemanda\"}\r\n                            placeholder=\"Ingresar las unidades de demanda\"\r\n                            aria-label=\"UnidadDemanda\"\r\n                            aria-describedby=\"unidadDemanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\" id={\"costoDePreparacion\"} key={\"costoDePreparacion\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"K\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDePreparacion\"}\r\n                            value={costoDePreparacion}\r\n                            placeholder=\"Ingresar el costo por pedido\"\r\n                            aria-label=\"costoDePreparacion\"\r\n                            aria-describedby=\"costoDePreparacion\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            \r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\" id={\"costoDeAlmacenamiento\"} key={\"costoDeAlmacenamiento\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"c1\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText >{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDeAlmacenamiento\"}\r\n                            value={costoDeAlmacenamiento}\r\n                            placeholder=\"Ingresar el costo de almacenamiento\"\r\n                            aria-label=\"costoDePreparacion\"\r\n                            aria-describedby=\"costoDePreparacion\"\r\n                            onChange={this.handleInputChange}\r\n                            />  \r\n                            \r\n                            <InputGroupAddon className=\"unidadesAlmacenamiento\" addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"\"\r\n                            name={\"unidadesAlmacenamiento\"}\r\n                            placeholder=\"Ingresar las unidades de tiempo\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        \r\n                        </InputGroup>\r\n                    </Col>\r\n                    \r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"b\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDeProducto\"}\r\n                            value={costoDeProducto}\r\n                            placeholder=\"Ingresar el costo del producto x unidad\"\r\n                            aria-label=\"costoDeProducto\"\r\n                            aria-describedby=\"costoDeProducto\"\r\n                            onChange={this.handleInputChange}\r\n                            />                        \r\n                        </InputGroup>\r\n                    </Col>\r\n                                        \r\n                    {mostrarResultados && (    //Si mostrarResultados esta en true que quiere decir que apreto el boton y que todos los campos estan completos\r\n                                                          \r\n                    <Col>\r\n                        <Row>\r\n                            <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333', margin:15}}>\r\n                                <CardText className=\"text-left\">\r\n                                    <Table dark className=\"text-center\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Variable</th>\r\n                                                <th>Nombre Variable</th>\r\n                                                <th className=\"text-left\"><b>Resultado</b></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>q</td>\r\n                                                <td>Lote optimo</td>\r\n                                                <td className=\"text-left\"><b>{Number(loteOptimo).toFixed(2)} {unidadesDemanda}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>t0</td>\r\n                                                <td>Tiempo entre Pedidos</td>\r\n                                                <td className=\"text-left\"><b>{Number(tiempoEntrePedidos).toFixed(2)} {unidadesAlmacenamiento}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>CTPrep</td>\r\n                                                <td>Costo Total Preparacion</td>\r\n                                                <td className=\"text-left\"><b>$ {Number(costoDePreparacionTotal).toFixed(2)}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>CTProp</td>\r\n                                                <td>Costo total Producto</td>\r\n                                                <td className=\"text-left\"><b>$ {Number(costoDeProductoTotal).toFixed(2)}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>CTA</td>\r\n                                                <td>Costo Total Almacenamiento</td>\r\n                                                <td className=\"text-left\"><b>$ {Number(costoDeAlmacenamientoTotal).toFixed(2)}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>CTE</td>\r\n                                                <td>Costo Total Esperado</td>\r\n                                                <td className=\"text-left\"><b>$ {Number(CTE).toFixed(2)}</b></td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                    <Col>\r\n                                        <Card body inverse color=\"primary\" style={{marginTop:10, padding: '5px 0 0 0'}}>\r\n                                            <CardText className=\"text-center\">\r\n                                            <h5>Pedir {Number(loteOptimo).toFixed(2)} {unidadesDemanda} cada {Number(tiempoEntrePedidos).toFixed(2)} {unidadesAlmacenamiento}</h5>\r\n                                            </CardText>\r\n                                        </Card>   \r\n                                    </Col>\r\n                                </CardText>\r\n                            </Card>\r\n                        </Row>\r\n                        <Row>\r\n                            <Card body>\r\n                                <Graph y={loteOptimo} t={tiempoEntrePedidos} yProm={Number(loteOptimo)/2} title={'Grafico Modelo Wilson'}/>\r\n                            </Card>\r\n                        </Row>   \r\n                    </Col>)}\r\n                           \r\n                    {incompleto && (\r\n                    <Card className=\"card-incompleto\" body inverse color=\"danger\" style={{padding: '0 0 0 0', marginTop:10}}>\r\n                        <CardText>Complete más campos para poder continuar y luego presione calcular.</CardText>\r\n                    </Card>)}\r\n                    \r\n                    \r\n                    <Row className=\"btn-volver justify-content-center\">\r\n                        <Link to='./'><Button>Volver</Button></Link>\r\n                        <Button className=\"btn-Calcular\" color=\"success\" onClick={this.mostrarResultados}>Calcular</Button>\r\n                    </Row>\r\n                    \r\n                </Jumbotron>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n\r\nexport default ModeloWilson;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText, UncontrolledPopover} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\nimport MathJax from \"react-mathjax\"\r\n\r\n\r\n\r\nconst info = () => {\r\n    return(\r\n    <Container fluid className=\"App\">\r\n      <Row>\r\n        <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n          <Jumbotron>\r\n            <Row className=\"justify-content-center\">\r\n                <div>\r\n                    <h2>Modelo Wilson</h2><br></br>\r\n                </div>\r\n            </Row>\r\n            \r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\" >\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Hipotesis</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li>No tenemos en cuenta si contamos o no con los recursos financieros</li>\r\n                        <li>No hay inflasión</li>\r\n                        <li>No se permiten faltantes</li>\r\n                        <li>Demanda constante y conocida.</li>\r\n                        <li>Resposición instantánea.</li>\r\n                        <li>Costo unitario de almacenamiento por unidad de tiempo 𝑐1, constante.</li>\r\n                        <li>Costo de preparacion 𝑘, constante.</li>\r\n                        <li>Costo unitario de producto 𝑏, constante.</li>\r\n                        <li>No existen otros costos.</li>\r\n                        <li>Al comienzo de cada periodo no hay stock ni pedidos insatisfechos.</li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                <Row className=\"justify-content-center\">\r\n                        <h5><b>Formulas</b></h5>\r\n                </Row>\r\n                        \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Preparacion = \\\\frac{D}{q}*K\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Del Producto = b*D\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Almacenamiento = \\\\frac{1}{2}*q*T*c1\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Esperado = \\\\frac{D}{q}*K + b*D + \\\\frac{1}{2}*q*T*c1 \"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Esperado Optimo =  b*D + \\\\sqrt{2*T*D*K*c1} \"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"q_{0} = \\\\sqrt{\\\\frac{2*K*D}{T*c1}} \"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"To = \\\\frac{T}{n_{0}} = \\\\frac{T*q_{0}}{D} = \\\\sqrt{\\\\frac{2*K*T}{D*c1}} \"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Variables</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li><b>D: </b>Demanda</li>\r\n                        <li><b>K: </b>Costo de preparacion</li>\r\n                        <li><b>c1: </b>Costo de almacenamiento</li>\r\n                        <li><b>b: </b>Costo unitario de producto</li>\r\n                        <li><b>T: </b>Tiempo Total</li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row className=\"justify-content-left\">\r\n                <Card body outline color=\"secondary\">\r\n                    <CardTitle><b>Bibliografia</b></CardTitle>\r\n                    <CardText>Claudio L. R. Sturla</CardText>\r\n                </Card>\r\n            </Row>\r\n            \r\n            \r\n            <Row className=\"btn-volver justify-content-center\">\r\n                <Link to='/StockProblems'><Button>Volver</Button></Link>\r\n            </Row>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n    };\r\nexport default info;","import React from \"react\";\r\nimport {Button, Container, Row, Col, Card,Jumbotron, Table} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon, CardText} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport Graph from \"../Graph\";\r\n\r\n\r\n\r\nclass ModeloStockProteccion extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            demanda: null, //D\r\n            CostoDeUnaOrden: null, //K\r\n            costoDeAlmacenamiento: null,//c1\r\n            costoDeAdquisicion: null, //b\r\n            StockDeProteccion:null,// c2\r\n            unidadesAlmacenamiento: null,\r\n            unidadesDemanda:null,\r\n            loteOptimo:null, //q\r\n            tiempoEntrePedidos: null, //t0\r\n            mostrarResultados: false,\r\n            inputUpdated: false,\r\n            incompleto: false,\r\n            CTE: null,\r\n            T:1,\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){ //Para comparar mi estado actual con el estado anterior. Verificamos si se actualizo algun campo de los input.\r\n        if(this.state.inputUpdated){\r\n            this.setState({inputUpdated:false})\r\n            this.controlarCambio();\r\n            \r\n        } \r\n    }\r\n\r\n    handleInputChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            inputUpdated: true,\r\n        })\r\n    }\r\n\r\n    //SI HUBO CAMBIOS QUE DESAPAREZCA LA VENTANA QUE MUESTRA LOS RESULTADOS\r\n    controlarCambio = () => { \r\n        this.setState({mostrarResultados:false})\r\n    }\r\n    \r\n\r\n    //q0\r\n    calcularTamañoDelLote(){\r\n        let {demanda, CostoDeUnaOrden,T, CostoUnitarioDeAlmacenamiento, loteOptimo} = this.state;\r\n        loteOptimo = (Math.sqrt((2*Number(CostoDeUnaOrden)*Number(demanda))/(Number(CostoUnitarioDeAlmacenamiento)*Number(T))));\r\n        \r\n        if (loteOptimo>demanda){ //Si el q0 calculado es mas grande que la demanda entonces como lote optimo va la demanda\r\n            this.setState({loteOptimo: demanda})\r\n        }else{\r\n            this.setState({loteOptimo})\r\n        }\r\n    }\r\n\r\n    //CALCULAR t0\r\n    calcularIntervaloDeUnCiclo()\r\n    {\r\n        let {demanda, CostoDeUnaOrden, CostoUnitarioDeAlmacenamiento,T} = this.state;\r\n        this.setState({tiempoEntrePedidos: (Math.sqrt((2*Number(CostoDeUnaOrden)*Number(T))/(Number(demanda)*Number(CostoUnitarioDeAlmacenamiento)))) })\r\n    }\r\n\r\n    //CALCULAR CTE\r\n    calcularCostoTotalEsperado(){\r\n        let {costoDeAdquisicion,demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,StockDeProteccion,T} = this.state;\r\n        let bD, raiz2TDKC1, spTC1, spb\r\n        bD = (Number(costoDeAdquisicion)*Number(demanda))\r\n        raiz2TDKC1 = (Math.sqrt(2*Number(CostoDeUnaOrden)*Number(demanda)*Number(T)*Number(CostoUnitarioDeAlmacenamiento)))\r\n        spTC1 = (Number(StockDeProteccion)*Number(CostoUnitarioDeAlmacenamiento)*Number(T))\r\n        spb = (Number(StockDeProteccion) * Number(costoDeAdquisicion))\r\n        this.setState({CTE: (bD + raiz2TDKC1 + spTC1 + spb) }) //CTEo\r\n    }\r\n    \r\n    calcularStockDeReorden(){\r\n        let {LeadTime,demanda,StockDeProteccion} = this.state;\r\n      return((LeadTime*demanda)+StockDeProteccion)//sp\r\n    }\r\n\r\n    mostrarResultados = () => {\r\n        let {demanda, costoDeAdquisicion, CostoUnitarioDeAlmacenamiento, CostoDeUnaOrden, T,LeadTime,StockDeProteccion} = this.state;\r\n        let combinacion1 = [demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,costoDeAdquisicion,StockDeProteccion] //Cargamos un arreglo\r\n        let control1 = combinacion1.every(caso => caso); //Si devuelve true es porque todos los elementos del arreglo estan cargados \r\n        \r\n        if (control1){ //SI TODOS LOS CAMPOS ESTAN CARGADOS ENTONCES CALCULO TODO Y MUESTRO\r\n\r\n            this.calcularTamañoDelLote(); //Calculo q0\r\n            this.calcularIntervaloDeUnCiclo(); //Calculo t0\r\n            \r\n            setTimeout(() => { //Luego de calcular lo anterior, le doy un tiempo para que calcule el CTE\r\n                this.calcularCostoTotalEsperado();\r\n            }, 1);\r\n\r\n            this.setState({mostrarResultados: true})\r\n            this.setState({incompleto: false})\r\n\r\n        }else{\r\n            this.setState({incompleto:true}) //PONGO A INCOMPLETO EN TRUE Y MUESTRO LA ALERTA DE COMPLETAR CAMPOS\r\n        }\r\n                      \r\n    }\r\n\r\n    render() { \r\n        let {demanda,CTE,loteOptimo,tiempoEntrePedidos,CostoDeUnaOrden,costoDeAdquisicion, StockDeProteccion} = this.state;\r\n        let {incompleto,mostrarResultados,CostoUnitarioDeAlmacenamiento,unidadesDemanda,unidadesAlmacenamiento} = this.state;\r\n        \r\n \r\n        \r\n        return (\r\n            <Container fluid className=\"App\"> \r\n            <Row>\r\n              <Col xs={12} md={8} className=\"my-4 mx-auto\">\r\n                <Jumbotron>\r\n                    <Col>\r\n                        <h2>Modelo con stock de proteccion</h2><br></br>                   \r\n                    </Col>\r\n                    \r\n                    <Col> \r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"D\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-demanda\"\r\n                            name={\"demanda\"}\r\n                            value={demanda}\r\n                            placeholder=\"Ingresar la demanda\"\r\n                            aria-label=\"Demanda\"\r\n                            aria-describedby=\"demanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            <InputGroupAddon className=\"input-unidades\" addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-unidadesDemanda\"\r\n                            name={\"unidadesDemanda\"}\r\n                            placeholder=\"Ingresar las unidades de demanda\"\r\n                            aria-label=\"UnidadDemanda\"\r\n                            aria-describedby=\"unidadDemanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"K\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoDeUnaOrden\"}\r\n                            value={CostoDeUnaOrden}\r\n                            placeholder=\"Ingresar el costo de preparacion/producción\"\r\n                            aria-label=\"CostoDeUnaOrden\"\r\n                            aria-describedby=\"CostoDeUnaOrden\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"c1\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoUnitarioDeAlmacenamiento\"}\r\n                            value={CostoUnitarioDeAlmacenamiento}\r\n                            placeholder=\"Ingresar el costo de almacenamiento\"\r\n                            aria-label=\"CostoUnitarioDeAlmacenamiento\"\r\n                            aria-describedby=\"CostoUnitarioDeAlmacenamiento\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            \r\n                            <InputGroupAddon className=\"unidadesAlmacenamiento\" addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"\"\r\n                            name={\"unidadesAlmacenamiento\"}\r\n                            placeholder=\"Ingresar las unidades de tiempo\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"b\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDeAdquisicion\"}\r\n                            value={costoDeAdquisicion}\r\n                            placeholder=\"Ingresar el costo del producto x unidad\"\r\n                            aria-label=\"costoDeAdquisicion\"\r\n                            aria-describedby=\"costoDeAdquisicion\"\r\n                            onChange={this.handleInputChange}\r\n                            />                        \r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"sp\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"StockDeProteccion\"}\r\n                            placeholder=\"Ingresar stock de proteccion\"\r\n                            aria-label=\"StockDeProteccion\"\r\n                            aria-describedby=\"StockDeProteccion\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                                        \r\n                    {mostrarResultados && (    //Si mostrarResultados esta en true que quiere decir que apreto el boton y que todos los campos estan completos\r\n                                                          \r\n                    <Col>\r\n                        <Row>\r\n                            <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333', margin:15}}>\r\n                                <CardText>\r\n                                <Table dark className=\"text-center\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Variable</th>\r\n                                                <th>Nombre Variable</th>\r\n                                                <th className=\"text-left\"><b>Resultado</b></th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>q</td>\r\n                                                <td>Lote optimo</td>\r\n                                                <td className=\"text-left\"><b>{Number(loteOptimo).toFixed(2)} {unidadesDemanda}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>t0</td>\r\n                                                <td>Tiempo entre Pedidos</td>\r\n                                                <td className=\"text-left\"><b>{Number(tiempoEntrePedidos).toFixed(2)} {unidadesAlmacenamiento}</b></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>CTPrep</td>\r\n                                                <td>Costo Total Preparacion</td>\r\n                                                <td></td>\r\n                                                {/*<td className=\"text-left\"><b>$ {Number(costoDePreparacionTotal).toFixed(2)}</b></td>*/}\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>CTProp</td>\r\n                                                <td>Costo total Producto</td>\r\n                                                <td></td>\r\n                                                {/*<td className=\"text-left\"><b>$ {Number(costoDeProductoTotal).toFixed(2)}</b></td>*/}\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>CTA</td>\r\n                                                <td>Costo Total Almacenamiento</td>\r\n                                                <td></td>\r\n                                                {/*<td className=\"text-left\"><b>$ {Number(costoDeAlmacenamientoTotal).toFixed(2)}</b></td>*/}\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>CTE</td>\r\n                                                <td>Costo Total Esperado</td>\r\n                                                <td className=\"text-left\"><b>$ {Number(CTE).toFixed(2)}</b></td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </Table>\r\n                                    <Col>\r\n                                        <Card body inverse color=\"primary\" style={{marginTop:10, padding: '5px 0 0 0'}}>\r\n                                            <CardText>\r\n                                            <h5>Pedir {Number(loteOptimo).toFixed(2)} {unidadesDemanda} cada {Number(tiempoEntrePedidos).toFixed(2)} {unidadesAlmacenamiento}</h5>\r\n                                            </CardText>\r\n                                        </Card>   \r\n                                    </Col>\r\n                                </CardText>\r\n                            </Card> \r\n                        </Row>\r\n                        <Row>\r\n                            <Card body>\r\n                                <Graph y={loteOptimo} t={tiempoEntrePedidos} sr={StockDeProteccion} yProm={Number(loteOptimo)/2} title={'Grafico Stock de Proteccion'}/>\r\n                            </Card>\r\n                        </Row>  \r\n                    </Col>)}\r\n                           \r\n                    {incompleto && (\r\n                    <Card className=\"card-incompleto\" body inverse color=\"danger\" style={{padding: '0 0 0 0', marginTop:10}}>\r\n                        <CardText>Complete más campos para poder continuar y luego presione calcular.</CardText>\r\n                    </Card>)}\r\n                    \r\n                    \r\n                    <Row className=\"btn-volver justify-content-center\">\r\n                        <Link to='./'><Button>Volver</Button></Link>\r\n                        <Button className=\"btn-Calcular\" color=\"success\" onClick={this.mostrarResultados}>Calcular</Button>\r\n                    </Row>\r\n                    \r\n                </Jumbotron>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n\r\nexport default ModeloStockProteccion;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText, UncontrolledPopover} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\nimport MathJax from \"react-mathjax\"\r\n\r\n\r\n\r\nconst info = () => {\r\n    return(\r\n    <Container fluid className=\"App\">\r\n      <Row>\r\n        <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n          <Jumbotron>\r\n            <Row className=\"justify-content-center\">\r\n                <div>\r\n                    <h2>Demanda Constante con inventario de contingencia</h2>\r\n                    <h5>Modelo con stock de proteccion</h5><br></br>\r\n                </div>\r\n            </Row>\r\n            \r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\" >\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Hipotesis</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li>No tenemos en cuenta si contamos o no con los recursos financieros</li>\r\n                        <li>No hay inflasión</li>\r\n                        <li>No se permiten faltantes</li>\r\n                        <li>Demanda constante y conocida.</li>\r\n                        <li>Resposición instantánea.</li>\r\n                        <li>Costo unitario de almacenamiento por unidad de tiempo 𝑐1, constante.</li>\r\n                        <li>Costo de preparacion 𝑘, constante.</li>\r\n                        <li>Costo unitario de producto 𝑏, constante.</li>\r\n                        <li>No existen otros costos.</li>\r\n                        <li>No existen restricciones.</li>\r\n                        <li>Se mantiene almacenada una cantidad 𝑆𝑝 en forma permanente.</li>\r\n                        <li>Al comienzo de cada periodo no hay stock ni pedidos insatisfechos.</li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                <Row className=\"justify-content-center\">\r\n                        <h5><b>Formulas</b></h5>\r\n                </Row>\r\n                        \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Preparacion = \\\\frac{D}{q}*K\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Del Producto = b*D\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Almacenamiento = \\\\frac{1}{2}*q*T*c1\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo De Adquisición de Sp = sp*b\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo De Mantenimiento de sp = sp*T*c1\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Esperado = \\\\frac{D}{q}*K + b*D + \\\\frac{1}{2}*q*T*c1 +sp*b +sp*T*c1\"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Esperado Optimo =  b*D + \\\\sqrt{2*T*D*K*c1} +sp*b +sp*T*c1 \"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"q_{0} = \\\\sqrt{\\\\frac{2*K*D}{T*c1}} \"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"To = \\\\frac{T}{n_{0}} = \\\\frac{T*q_{0}}{D} = \\\\sqrt{\\\\frac{2*K*T}{D*c1}} \"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Variables</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li><b>D: </b>Demanda</li>\r\n                        <li><b>K: </b>Costo de preparacion</li>\r\n                        <li><b>c1: </b>Costo de almacenamiento</li>\r\n                        <li><b>b: </b>Costo unitario de producto</li>\r\n                        <li><b>sp: </b>Stock de protección</li>\r\n                        <li><b>T: </b>Tiempo Total</li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row className=\"justify-content-left\">\r\n                <Card body outline color=\"secondary\">\r\n                    <CardTitle><b>Bibliografia</b></CardTitle>\r\n                    <CardText>Claudio L. R. Sturla</CardText>\r\n                </Card>\r\n            </Row>\r\n            \r\n            \r\n            <Row className=\"btn-volver justify-content-center\">\r\n                <Link to='/StockProblems'><Button>Volver</Button></Link>\r\n            </Row>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n    };\r\nexport default info;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\n\r\n\r\n\r\nclass ModeloAgotamientoAdmitido extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            demanda: null, //D\r\n            CostoDeUnaOrden: null, //K\r\n            costoDeAlmacenamiento: null,//c1\r\n            costoDeAdquisicion: null, //b\r\n            StockDeProteccion:null,// c2\r\n            unidadesAlmacenamiento: null,\r\n            unidadesDemanda:null,\r\n            loteOptimo:null, //q\r\n            tiempoEntrePedidos: null, //t0\r\n            mostrarResultados: false,\r\n            inputUpdated: false,\r\n            incompleto: false,\r\n            CTE: null,\r\n            T:1,\r\n            CostoDeEscasez: null,\r\n            stockAlmacenado:null,\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){ //Para comparar mi estado actual con el estado anterior. Verificamos si se actualizo algun campo de los input.\r\n        if(this.state.inputUpdated){\r\n            this.setState({inputUpdated:false})\r\n            this.controlarCambio();\r\n            \r\n        } \r\n    }\r\n\r\n    handleInputChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            inputUpdated: true,\r\n        })\r\n    }\r\n\r\n    //SI HUBO CAMBIOS QUE DESAPAREZCA LA VENTANA QUE MUESTRA LOS RESULTADOS\r\n    controlarCambio = () => { \r\n        this.setState({mostrarResultados:false})\r\n    }\r\n    \r\n\r\n    //q0\r\n    calcularTamañoDelLote(){\r\n        let {demanda, CostoDeUnaOrden,T, CostoUnitarioDeAlmacenamiento, CostoDeEscasez} = this.state;\r\n        let primerRaiz, segundaRaiz, loteOptimo\r\n        primerRaiz = (Math.sqrt((2*Number(CostoDeUnaOrden)*Number(demanda))/(Number(CostoUnitarioDeAlmacenamiento)*Number(T))))\r\n        segundaRaiz = ( Math.sqrt((Number(CostoUnitarioDeAlmacenamiento)+Number(CostoDeEscasez))/(Number(CostoDeEscasez))) );\r\n        loteOptimo = (primerRaiz * segundaRaiz)\r\n        \r\n        if (loteOptimo>demanda){ //Si el q0 calculado es mas grande que la demanda entonces como lote optimo va la demanda\r\n            this.setState({loteOptimo: demanda})\r\n        }else{\r\n            this.setState({loteOptimo})\r\n        }\r\n    }\r\n\r\n    //CALCULAR t0\r\n    calcularIntervaloDeUnCiclo()\r\n    {\r\n        let {demanda, CostoDeUnaOrden, CostoUnitarioDeAlmacenamiento,T, CostoDeEscasez} = this.state;\r\n        let primerRaiz, segundaRaiz, loteOptimo\r\n        primerRaiz = (Math.sqrt((2*Number(CostoDeUnaOrden)*Number(T))/(Number(demanda)*Number(CostoUnitarioDeAlmacenamiento))))\r\n        segundaRaiz = ( Math.sqrt((Number(CostoUnitarioDeAlmacenamiento)+Number(CostoDeEscasez))/(Number(CostoDeEscasez))) );\r\n        this.setState({tiempoEntrePedidos: (primerRaiz+segundaRaiz) })\r\n    }\r\n\r\n    //CALCULAR CTE\r\n    calcularCostoTotalEsperado(){\r\n        let {costoDeAdquisicion,demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,CostoDeEscasez,T} = this.state;\r\n        let bD, raiz2TDKC1, raizc1c2\r\n        bD = (Number(costoDeAdquisicion)*Number(demanda))\r\n        raiz2TDKC1 = (Math.sqrt(2*Number(CostoDeUnaOrden)*Number(demanda)*Number(T)*Number(CostoUnitarioDeAlmacenamiento)))\r\n        raizc1c2 = ( Math.sqrt( (Number(CostoDeEscasez))/(Number(CostoUnitarioDeAlmacenamiento)+(Number(CostoDeEscasez))) ) )\r\n        this.setState({CTE: (bD + (raiz2TDKC1*raizc1c2)) }) //CTEo\r\n    }\r\n\r\n    //CALCULAR s\r\n    calcularStockRealAlmacenado(){\r\n        let {demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,CostoDeEscasez,T} = this.state;\r\n        let primerRaiz, segundaRaiz\r\n        primerRaiz = (Math.sqrt((2*Number(CostoDeUnaOrden)*Number(demanda))/(Number(CostoUnitarioDeAlmacenamiento)*Number(T))))\r\n        segundaRaiz = ( Math.sqrt((Number(CostoDeEscasez)) / (Number(CostoDeEscasez)+Number(CostoUnitarioDeAlmacenamiento))) )\r\n                \r\n        this.setState({stockAlmacenado: (primerRaiz*segundaRaiz) })\r\n    }\r\n    \r\n    calcularStockDeReorden(){\r\n        let {LeadTime,demanda,StockDeProteccion} = this.state;\r\n      return((LeadTime*demanda)+StockDeProteccion)//sp\r\n    }\r\n\r\n    /* //FUNCIONES QUE NO ESTAMOS OCUPANDO\r\n    calcularCostoTotalEsperadoConQ(){\r\n        let {costoDeAdquisicion,demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,StockDeProteccion,T} = this.state;\r\n        let q = this.calcularTamañoDelLote();\r\n        return((costoDeAdquisicion*demanda)+(q*CostoUnitarioDeAlmacenamiento*T)/2+CostoDeUnaOrden/(demanda/q)*StockDeProteccion*CostoUnitarioDeAlmacenamiento*T)//CTEo\r\n    }\r\n\r\n    calcularIntervaloDeUnCicloSinRaiz()\r\n    {\r\n        let {demanda, T} = this.state;\r\n        return ((this.calcularTamañoDelLote()*T)/(demanda)); //to\r\n    }\r\n\r\n    calcularTamañoDelLoteSinRaiz(){\r\n        let {demanda, T, } = this.state;\r\n        let to = this.calcularIntervaloDeUnCiclo()\r\n        return ((demanda*to)/T); //q\r\n    }\r\n    */\r\n\r\n    mostrarResultados = () => {\r\n        let {demanda, costoDeAdquisicion, CostoUnitarioDeAlmacenamiento, CostoDeUnaOrden,CostoDeEscasez} = this.state;\r\n        let combinacion1 = [demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,costoDeAdquisicion,CostoDeEscasez] //Cargamos un arreglo\r\n        let control1 = combinacion1.every(caso => caso); //Si devuelve true es porque todos los elementos del arreglo estan cargados \r\n        \r\n        if (control1){ //SI TODOS LOS CAMPOS ESTAN CARGADOS ENTONCES CALCULO TODO Y MUESTRO\r\n\r\n            this.calcularTamañoDelLote(); //Calculo q0\r\n            this.calcularIntervaloDeUnCiclo(); //Calculo t0\r\n            this.calcularStockRealAlmacenado(); //Calculo s\r\n            \r\n            setTimeout(() => { //Luego de calcular lo anterior, le doy un tiempo para que calcule el CTE\r\n                this.calcularCostoTotalEsperado();\r\n            }, 1);\r\n\r\n            this.setState({mostrarResultados: true})\r\n            this.setState({incompleto: false})\r\n\r\n        }else{\r\n            this.setState({incompleto:true}) //PONGO A INCOMPLETO EN TRUE Y MUESTRO LA ALERTA DE COMPLETAR CAMPOS\r\n        }\r\n                      \r\n    }\r\n\r\n    render() { \r\n        let {demanda,CTE,loteOptimo,tiempoEntrePedidos,CostoDeUnaOrden,costoDeAdquisicion, CostoDeEscasez} = this.state;\r\n        let {incompleto,mostrarResultados,CostoUnitarioDeAlmacenamiento,unidadesDemanda,unidadesAlmacenamiento, stockAlmacenado} = this.state;\r\n        \r\n \r\n        \r\n        return (\r\n            <Container fluid className=\"App\"> \r\n            <Row>\r\n              <Col xs={12} md={8} className=\"my-4 mx-auto\">\r\n                <Jumbotron>\r\n                    <Col>\r\n                        <h2>Modelo con agotamiento</h2><br></br>                   \r\n                    </Col>\r\n                    \r\n                    <Col> \r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"D\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-demanda\"\r\n                            name={\"demanda\"}\r\n                            value={demanda}\r\n                            placeholder=\"Ingresar la demanda\"\r\n                            aria-label=\"Demanda\"\r\n                            aria-describedby=\"demanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            <InputGroupAddon className=\"input-unidades\" addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-unidadesDemanda\"\r\n                            name={\"unidadesDemanda\"}\r\n                            placeholder=\"Ingresar las unidades de demanda\"\r\n                            aria-label=\"UnidadDemanda\"\r\n                            aria-describedby=\"unidadDemanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"K\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoDeUnaOrden\"}\r\n                            value={CostoDeUnaOrden}\r\n                            placeholder=\"Ingresar el costo de preparacion/producción\"\r\n                            aria-label=\"CostoDeUnaOrden\"\r\n                            aria-describedby=\"CostoDeUnaOrden\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"c1\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoUnitarioDeAlmacenamiento\"}\r\n                            value={CostoUnitarioDeAlmacenamiento}\r\n                            placeholder=\"Ingresar el costo de almacenamiento\"\r\n                            aria-label=\"CostoUnitarioDeAlmacenamiento\"\r\n                            aria-describedby=\"CostoUnitarioDeAlmacenamiento\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            \r\n                            <InputGroupAddon className=\"unidadesAlmacenamiento\" addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"\"\r\n                            name={\"unidadesAlmacenamiento\"}\r\n                            placeholder=\"Ingresar las unidades de tiempo\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"b\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDeAdquisicion\"}\r\n                            value={costoDeAdquisicion}\r\n                            placeholder=\"Ingresar el costo del producto x unidad\"\r\n                            aria-label=\"costoDeAdquisicion\"\r\n                            aria-describedby=\"costoDeAdquisicion\"\r\n                            onChange={this.handleInputChange}\r\n                            />                        \r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"c2\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoDeEscasez\"}\r\n                            value={CostoDeEscasez}\r\n                            placeholder=\"Ingresar el costo de escasez\"\r\n                            aria-label=\"CostoDeEscasez\"\r\n                            aria-describedby=\"CostoDeEscasez\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                                        \r\n                    {mostrarResultados && (    //Si mostrarResultados esta en true que quiere decir que apreto el boton y que todos los campos estan completos\r\n                                                          \r\n                    <Col>\r\n                        <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333', marginTop:10}}>\r\n                            <CardText>\r\n                                <h6 style={{display:'inline'}}>El lote optimo es:</h6> <h5 style={{display:'inline'}}><b>{Number(loteOptimo).toFixed(2)}</b></h5><br></br>\r\n                                <h6 style={{display:'inline'}}>El tiempo entre pedidos es:</h6> <h5 style={{display:'inline'}}><b>{Number(tiempoEntrePedidos).toFixed(2)}</b></h5><br></br>\r\n                                <h6 style={{display:'inline'}}>La cantidad de stock almacenado es:</h6> <h5 style={{display:'inline'}}><b>{Number(stockAlmacenado).toFixed(2)} {unidadesDemanda}</b></h5><br></br>\r\n                                <h6 style={{display:'inline'}}>El costo total esperado es:</h6> <h5 style={{display:'inline'}}><b>${Number(CTE).toFixed(2)}</b></h5><br></br>\r\n                                <Col>\r\n                                    <Card body inverse color=\"primary\" style={{marginTop:10, padding: '5px 0 0 0'}}>\r\n                                        <CardText>\r\n                                        <h5>Pedir {Number(loteOptimo).toFixed(2)} {unidadesDemanda} cada {Number(tiempoEntrePedidos).toFixed(2)} {unidadesAlmacenamiento}</h5>\r\n                                        </CardText>\r\n                                    </Card>   \r\n                                </Col>\r\n                            </CardText>\r\n                        </Card>   \r\n                    </Col>)}\r\n                           \r\n                    {incompleto && (\r\n                    <Card className=\"card-incompleto\" body inverse color=\"danger\" style={{padding: '0 0 0 0', marginTop:10}}>\r\n                        <CardText>Complete más campos para poder continuar y luego presione calcular.</CardText>\r\n                    </Card>)}\r\n                    \r\n                    \r\n                    <Row className=\"btn-volver justify-content-center\">\r\n                        <Link to='./'><Button>Volver</Button></Link>\r\n                        <Button className=\"btn-Calcular\" color=\"success\" onClick={this.mostrarResultados}>Calcular</Button>\r\n                    </Row>\r\n                    \r\n                </Jumbotron>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n\r\nexport default ModeloAgotamientoAdmitido;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText, UncontrolledPopover} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\nimport MathJax from \"react-mathjax\"\r\n\r\n\r\n\r\nconst info = () => {\r\n    return(\r\n    <Container fluid className=\"App\">\r\n      <Row>\r\n        <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n          <Jumbotron>\r\n            <Row className=\"justify-content-center\">\r\n                <div>\r\n                    <h2>Demanda constante con agotamiento o simple con escasez</h2>\r\n                </div>\r\n            </Row>\r\n            \r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\" >\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Hipotesis</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li>No tenemos en cuenta si contamos o no con los recursos financieros</li>\r\n                        <li>No hay inflasión</li>\r\n                        <li>Demanda constante y conocida.</li>\r\n                        <li>Resposición instantánea.</li>\r\n                        <li>Costo unitario de almacenamiento por unidad de tiempo 𝑐1, constante.</li>\r\n                        <li>Costo unitario de agotamiento por unidad de tiempo 𝑐2, constante.</li>\r\n                        <li>Costo de preparacion 𝑘, constante.</li>\r\n                        <li>Costo unitario de producto 𝑏, constante.</li>\r\n                        <li>No existen otros costos.</li>\r\n                        <li>No existen restricciones.</li>\r\n                        <li>Al comienzo de cada periodo hay pedidos insatisfechos.</li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                <Row className=\"justify-content-center\">\r\n                        <h5><b>Formulas</b></h5>\r\n                </Row>\r\n                        \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Preparacion = \\\\frac{D}{q}*K\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Del Producto = b*D\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Almacenamiento = \\\\frac{1}{2}*s^2*\\\\frac{T}{q}*c1\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo De Agotamiento = \\\\frac{1}{2}*\\\\frac{T}{q}*(q-s)^2*c2\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Esperado = \\\\frac{D}{q}*K + b*D + \\\\frac{1}{2}*s^2*\\\\frac{T}{q}*c1 +\\\\frac{1}{2}*\\\\frac{T}{q}*(q-s)^2*c2\"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Esperado Optimo =  b*D + \\\\sqrt{2*T*D*K*c1} * \\\\sqrt{\\\\frac{c2}{c1+c2}}\"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Cantidad Pendiente Optima = q_{0}-s_{0} \"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"q_{0} = \\\\sqrt{\\\\frac{2*K*D}{T*c1}} * \\\\sqrt{\\\\frac{c1+c2}{c2}} \"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"s_{0} = \\\\frac{c2*}{c1+c2} * q_{0} = \\\\sqrt{\\\\frac{2*K*D}{T*c1}} * \\\\sqrt{\\\\frac{c2}{c1+c2}}\"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"To = \\\\sqrt{\\\\frac{2*K*T}{D*c1}} * \\\\sqrt{\\\\frac{c1+c2}{c2}}\"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Variables</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li><b>D: </b>Demanda</li>\r\n                        <li><b>K: </b>Costo de preparacion</li>\r\n                        <li><b>c1: </b>Costo de almacenamiento</li>\r\n                        <li><b>c2: </b>Costo de agotamiento</li>\r\n                        <li><b>b: </b>Costo unitario de producto</li>\r\n                        <li><b>s: </b>Stock Real Almacenado</li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row className=\"justify-content-left\">\r\n                <Card body outline color=\"secondary\">\r\n                    <CardTitle><b>Bibliografia</b></CardTitle>\r\n                    <CardText>Claudio L. R. Sturla</CardText>\r\n                </Card>\r\n            </Row>\r\n            \r\n            \r\n            <Row className=\"btn-volver justify-content-center\">\r\n                <Link to='/StockProblems'><Button>Volver</Button></Link>\r\n            </Row>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n    };\r\nexport default info;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\n\r\n\r\n\r\nclass ModeloTriangular extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            demanda: null, //D\r\n            CostoDeUnaOrden: null, //K\r\n            costoDeAlmacenamiento: null,//c1\r\n            costoDeAdquisicion: null, //b\r\n            unidadesAlmacenamiento: null,\r\n            unidadesDemanda:null,\r\n            loteOptimo:null, //q\r\n            tiempoEntrePedidos: null, //t0\r\n            mostrarResultados: false,\r\n            inputUpdated: false,\r\n            incompleto: false,\r\n            CTE: null,\r\n            T:1,\r\n            VelocidadDeProduccion:null,\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){ //Para comparar mi estado actual con el estado anterior. Verificamos si se actualizo algun campo de los input.\r\n        if(this.state.inputUpdated){\r\n            this.setState({inputUpdated:false})\r\n            this.controlarCambio();\r\n            \r\n        } \r\n    }\r\n\r\n    handleInputChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            inputUpdated: true,\r\n        })\r\n    }\r\n\r\n    //SI HUBO CAMBIOS QUE DESAPAREZCA LA VENTANA QUE MUESTRA LOS RESULTADOS\r\n    controlarCambio = () => { \r\n        this.setState({mostrarResultados:false})\r\n    }\r\n    \r\n\r\n    //q0\r\n    calcularTamañoDelLote(){\r\n        let {demanda, CostoDeUnaOrden,T, CostoUnitarioDeAlmacenamiento, loteOptimo,VelocidadDeProduccion} = this.state;\r\n        let numerador, denominador, demandaUnitaria\r\n        demandaUnitaria= (Number(demanda)/Number(T))\r\n        numerador = ( 2*Number(CostoDeUnaOrden)*Number(demandaUnitaria)*Number(VelocidadDeProduccion) )\r\n        denominador = ( Number(CostoUnitarioDeAlmacenamiento)*(Number(VelocidadDeProduccion)-Number(demandaUnitaria)) )\r\n        loteOptimo = (Math.sqrt(numerador/denominador));\r\n        \r\n        //NO SE SI VA ESTO \r\n        if (loteOptimo>demanda){ //Si el q0 calculado es mas grande que la demanda entonces como lote optimo va la demanda\r\n            this.setState({loteOptimo: demanda})\r\n        }else{\r\n            this.setState({loteOptimo})\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    //CALCULAR CTE\r\n    calcularCostoTotalEsperado(){\r\n        let {costoDeAdquisicion,demanda,CostoDeUnaOrden,costoDeAlmacenamiento,T,VelocidadDeProduccion, loteOptimo} = this.state;\r\n        let bD, costoTotalDePreparacion, costoTotalDeAlmacenamiento, demandaUnitaria\r\n\r\n        \r\n        costoTotalDePreparacion = (Number(demanda)/(loteOptimo*Number(CostoDeUnaOrden)))\r\n        bD = (Number(costoDeAdquisicion)*Number(demanda))//Costo total del producto\r\n        demandaUnitaria = ( Number(demanda)/Number(T) )\r\n        costoTotalDeAlmacenamiento = ((loteOptimo*Number(T)*Number(costoDeAlmacenamiento)*(1-(demandaUnitaria/Number(VelocidadDeProduccion))))/2)\r\n        \r\n        this.setState({CTE: (costoTotalDePreparacion + bD + costoTotalDeAlmacenamiento) }) //CTEo\r\n    }\r\n    \r\n    \r\n\r\n    mostrarResultados = () => {\r\n        let {demanda, costoDeAdquisicion, CostoUnitarioDeAlmacenamiento, CostoDeUnaOrden,VelocidadDeProduccion} = this.state;\r\n        let combinacion1 = [demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,costoDeAdquisicion,VelocidadDeProduccion] //Cargamos un arreglo\r\n        let control1 = combinacion1.every(caso => caso); //Si devuelve true es porque todos los elementos del arreglo estan cargados \r\n        \r\n        if (control1){ //SI TODOS LOS CAMPOS ESTAN CARGADOS ENTONCES CALCULO TODO Y MUESTRO\r\n            this.calcularTamañoDelLote(); //Calculo q0\r\n            \r\n            setTimeout(() => { //Luego de calcular lo anterior, le doy un tiempo para que calcule el CTE\r\n                this.calcularCostoTotalEsperado();\r\n            }, 1);\r\n\r\n            this.setState({mostrarResultados: true})\r\n            this.setState({incompleto: false})\r\n\r\n        }else{\r\n            this.setState({incompleto:true}) //PONGO A INCOMPLETO EN TRUE Y MUESTRO LA ALERTA DE COMPLETAR CAMPOS\r\n        }\r\n                      \r\n    }\r\n\r\n    render() { \r\n        let {demanda,CTE,loteOptimo,tiempoEntrePedidos,CostoDeUnaOrden,costoDeAdquisicion, VelocidadDeProduccion} = this.state;\r\n        let {incompleto,mostrarResultados,CostoUnitarioDeAlmacenamiento,unidadesDemanda,unidadesAlmacenamiento} = this.state;\r\n        \r\n \r\n        \r\n        return (\r\n            <Container fluid className=\"App\"> \r\n            <Row>\r\n              <Col xs={12} md={8} className=\"my-4 mx-auto\">\r\n                <Jumbotron>\r\n                    <Col>\r\n                        <h2>Modelo Triangular</h2><br></br>                   \r\n                    </Col>\r\n                    \r\n                    <Col> \r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"D\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-demanda\"\r\n                            name={\"demanda\"}\r\n                            value={demanda}\r\n                            placeholder=\"Ingresar la demanda\"\r\n                            aria-label=\"Demanda\"\r\n                            aria-describedby=\"demanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            <InputGroupAddon className=\"input-unidades\" addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-unidadesDemanda\"\r\n                            name={\"unidadesDemanda\"}\r\n                            placeholder=\"Ingresar las unidades de demanda\"\r\n                            aria-label=\"UnidadDemanda\"\r\n                            aria-describedby=\"unidadDemanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"K\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoDeUnaOrden\"}\r\n                            value={CostoDeUnaOrden}\r\n                            placeholder=\"Ingresar el costo de preparacion/producción\"\r\n                            aria-label=\"CostoDeUnaOrden\"\r\n                            aria-describedby=\"CostoDeUnaOrden\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"c1\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoUnitarioDeAlmacenamiento\"}\r\n                            value={CostoUnitarioDeAlmacenamiento}\r\n                            placeholder=\"Ingresar el costo de almacenamiento\"\r\n                            aria-label=\"CostoUnitarioDeAlmacenamiento\"\r\n                            aria-describedby=\"CostoUnitarioDeAlmacenamiento\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            \r\n                            <InputGroupAddon className=\"unidadesAlmacenamiento\" addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"\"\r\n                            name={\"unidadesAlmacenamiento\"}\r\n                            placeholder=\"Ingresar las unidades de tiempo\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"b\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDeAdquisicion\"}\r\n                            value={costoDeAdquisicion}\r\n                            placeholder=\"Ingresar el costo del producto x unidad\"\r\n                            aria-label=\"costoDeAdquisicion\"\r\n                            aria-describedby=\"costoDeAdquisicion\"\r\n                            onChange={this.handleInputChange}\r\n                            />                        \r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"P\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"VelocidadDeProduccion\"}\r\n                            value={VelocidadDeProduccion}\r\n                            placeholder=\"Ingresar Velocidad De Produccion\"\r\n                            aria-label=\"VelocidadDeProduccion\"\r\n                            aria-describedby=\"VelocidadDeProduccion\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                                        \r\n                    {mostrarResultados && (    //Si mostrarResultados esta en true que quiere decir que apreto el boton y que todos los campos estan completos\r\n                                                          \r\n                    <Col>\r\n                        <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333', marginTop:10}}>\r\n                            <CardText>\r\n                                <h6 style={{display:'inline'}}>El lote optimo es:</h6> <h5 style={{display:'inline'}}><b>{Number(loteOptimo).toFixed(2)} {unidadesDemanda}</b></h5><br></br>\r\n                                <h6 style={{display:'inline'}}>El costo total esperado es:</h6> <h5 style={{display:'inline'}}><b>${Number(CTE).toFixed(2)}</b></h5><br></br>\r\n                                {/*<Col>\r\n                                    <Card body inverse color=\"primary\" style={{marginTop:10, padding: '5px 0 0 0'}}>\r\n                                        <CardText>\r\n                                        <h5>Pedir {Number(loteOptimo).toFixed(2)} {unidadesDemanda} cada {Number(tiempoEntrePedidos).toFixed(2)} {unidadesAlmacenamiento}</h5>\r\n                                        </CardText>\r\n                                    </Card>   \r\n                                </Col>*/}\r\n                            </CardText>\r\n                        </Card>   \r\n                    </Col>)}\r\n                           \r\n                    {incompleto && (\r\n                    <Card className=\"card-incompleto\" body inverse color=\"danger\" style={{padding: '0 0 0 0', marginTop:10}}>\r\n                        <CardText>Complete más campos para poder continuar y luego presione calcular.</CardText>\r\n                    </Card>)}\r\n                    \r\n                    \r\n                    <Row className=\"btn-volver justify-content-center\">\r\n                        <Link to='./'><Button>Volver</Button></Link>\r\n                        <Button className=\"btn-Calcular\" color=\"success\" onClick={this.mostrarResultados}>Calcular</Button>\r\n                    </Row>\r\n                    \r\n                </Jumbotron>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n\r\nexport default ModeloTriangular;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText, UncontrolledPopover} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\nimport MathJax from \"react-mathjax\"\r\n\r\nconst tex = 'f(x) = \\\\frac{1}{\\\\sqrt{x^2 + 1}}'\r\n\r\nconst info = () => {\r\n    return(\r\n    <Container fluid className=\"App\">\r\n      <Row>\r\n        <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n          <Jumbotron>\r\n\r\n              \r\n            <Row className=\"justify-content-center\">\r\n                <div>\r\n                    <h2>Modelo Triangular</h2><br></br>\r\n                </div>\r\n            </Row>\r\n            \r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\" >\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Hipotesis</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li>No tenemos en cuenta si contamos o no con los recursos financieros</li>\r\n                        <li>No hay inflasión</li>\r\n                        <li>Demanda constante y conocida.</li>\r\n                        <li>Resposición se hace a una tasa constante 𝑝.</li>\r\n                        <li>Costo unitario de almacenamiento por unidad de tiempo 𝑐1, constante.</li>\r\n                        <li>Costo de preparacion 𝑘, constante.</li>\r\n                        <li>Costo unitario de producto 𝑏, constante.</li>\r\n                        <li>No existen otros costos.</li>\r\n                        <li>No existen restricciones.</li>\r\n                        <li>Al comienzo de cada periodo no hay stock ni pedidos insatisfechos.</li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                <Row className=\"justify-content-center\">\r\n                        <h5><b>Formulas</b></h5>\r\n                </Row>\r\n                        \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Preparacion = \\\\frac{D}{q}*K\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Del Producto = b*D\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Almacenamiento = \\\\frac{1}{2}*q*T*c1*(1-\\\\frac{d}{p})\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Esperado = \\\\frac{D}{q}*K + b*K + \\\\frac{1}{2}*q*T*c1*(1-\\\\frac{d}{p}) \"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"q_{0} = \\\\sqrt{\\\\frac{2*K*D}{c1*(1-\\\\frac{d}{p})*T}} = \\\\sqrt{\\\\frac{2*K*d}{c1*(1-\\\\frac{d}{p})}} = \\\\sqrt{\\\\frac{2*K*d*p}{c1*(p-d)}}  \"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Variables</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li><b>D: </b>Demanda</li>\r\n                        <li><b>d: </b>Demanda Unitaria</li>                        \r\n                        <li><b>K: </b>Costo de preparacion</li>\r\n                        <li><b>c1: </b>Costo de almacenamiento</li>\r\n                        <li><b>b: </b>Costo unitario de producto</li>\r\n                        <li><b>p: </b>Velocidad de reposición</li>\r\n                        <li><b>T: </b>Tiempo Total</li>\r\n                        \r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row className=\"justify-content-left\">\r\n                <Card body outline color=\"secondary\">\r\n                    <CardTitle><b>Bibliografia</b></CardTitle>\r\n                    <CardText>Claudio L. R. Sturla</CardText>\r\n                </Card>\r\n            </Row>\r\n            \r\n            <Row className=\"btn-volver justify-content-center\">\r\n                <Link to='/StockProblems'><Button>Volver</Button></Link>\r\n            </Row>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n    };\r\nexport default info;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardText, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\n\r\n\r\nclass modelStockSimple extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            demanda: null, //D\r\n            costoDePreparacion: null, //K\r\n            costoDeAlmacenamiento: null,//h\r\n            tiempoDeEntrega:null,//L\r\n            precioC1:null,// c1\r\n            precioC2:null,// c2\r\n            limite:null,// q\r\n            punto:null,//Q\r\n            unidadCostoDeAlmacenamiento:1,\r\n            unidadesDemanda:null,\r\n            mostrarResultados: false,\r\n            inputUpdated: false,\r\n            incompleto: false,\r\n            ym: null,\r\n            loteOptimo:null,\r\n            TCL: null,\r\n            puntoDeReorden: null,\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){ //Para comparar mi estado actual con el estado anterior. Verificamos si se actualizo algun campo de los input.\r\n        if(this.state.inputUpdated){\r\n            this.setState({inputUpdated:false})\r\n            this.controlarCambio();\r\n            \r\n        } \r\n    }\r\n\r\n    handleInputChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            inputUpdated: true,\r\n        })\r\n    }\r\n\r\n    //SI HUBO CAMBIOS QUE DESAPAREZCA LA VENTANA QUE MUESTRA LOS RESULTADOS\r\n    controlarCambio = () => { \r\n        this.setState({mostrarResultados:false})\r\n    }\r\n    \r\n    //CALCULAMOS ym. LA FORMULA ES LA MISMA QUE y* EN EL CASO DE CEP\r\n    calcularInventarioOptimo(){\r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento, unidadCostoDeAlmacenamiento} = this.state;\r\n        this.setState({ ym: ( Math.sqrt((2*Number(costoDePreparacion)*Number(demanda))/(Number(costoDeAlmacenamiento)*Number(unidadCostoDeAlmacenamiento))) ) }) //ym \r\n    }\r\n    \r\n    \r\n    //CALCULAMOS EL COSTO CUANDO y <= q\r\n    calcularCostoInventarioMenorIgual()\r\n    {\r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento, precioC1, ym} = this.state;\r\n        return (Number(demanda)*Number(precioC1) + ((Number(costoDePreparacion)*Number(demanda))/(ym)) + (ym*Number(costoDeAlmacenamiento))/2 ) //TCU1(y)\r\n    }\r\n    \r\n    //CALCULAMOS EL COSTO CUANDO y > q\r\n    calcularCostoInventarioMayor()\r\n    {\r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento, precioC2, ym} = this.state;\r\n        return (Number(demanda)*Number(precioC2) + ((Number(costoDePreparacion)*Number(demanda))/(ym)) + (ym*Number(costoDeAlmacenamiento))/2 )  //TCU2(y)\r\n    }\r\n    \r\n    calcularCostoInventario(){\r\n        let {limite, ym} = this.state;\r\n        let TCU1, TCU2\r\n        TCU1 = this.calcularCostoInventarioMenorIgual()\r\n        TCU2 = this.calcularCostoInventarioMayor()\r\n        \r\n        if(ym<=limite){\r\n            this.setState({ TCL: TCU1 })\r\n        }\r\n        else{\r\n            this.setState({ TCL: TCU2 })\r\n        }\r\n    }\r\n    \r\n    calcularQ(){\r\n        let {demanda,costoDeAlmacenamiento, costoDePreparacion, precioC2, TCL, ym} = this.state;\r\n        let a = 1;\r\n        let b = (2*(Number(precioC2)*Number(demanda)-TCL))/Number*(costoDeAlmacenamiento);\r\n        let c = (2*Number(costoDePreparacion)*Number(demanda))/Number(costoDeAlmacenamiento)\r\n        \r\n        let valor1 = (-b+Math.sqrt(Math.pow(b,2)-4*a*c))/2*a;\r\n        let valor2 = (-b+Math.sqrt(Math.pow(b,2)-4*a*c))/2*a;\r\n    \r\n        if(valor1 > ym){\r\n            this.setState({ punto: valor1 })\r\n        }else{\r\n            this.setState({ punto: valor2 })\r\n        }\r\n    }\r\n    \r\n    tamañoPedido(){\r\n        let {limite, ym, punto} = this.state;\r\n       \r\n        if((limite>ym) & (limite<punto))\r\n        {\r\n            this.setState({ loteOptimo: limite })\r\n        }else{\r\n            this.setState({ loteOptimo: ym })\r\n        }\r\n    }\r\n\r\n    calcularPuntoDeReorden(){\r\n        let {demanda, tiempoDeEntrega} = this.state\r\n        this.setState({puntoDeReorden: (Number(demanda)*Number(tiempoDeEntrega) ) })\r\n    }\r\n\r\n\r\n    mostrarResultados = () => {\r\n        \r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento, tiempoDeEntrega, precioC1, precioC2, limite} = this.state;\r\n        let combinacion1 = [demanda, costoDePreparacion, costoDeAlmacenamiento, tiempoDeEntrega, precioC1, precioC2, limite] //Cargamos un arreglo\r\n        let control1 = combinacion1.every(caso => caso); //Si devuelve true es porque todos los elementos del arreglo estan cargados \r\n        \r\n        if (control1){ //SI TODOS LOS CAMPOS ESTAN CARGADOS ENTONCES CALCULO TODO Y MUESTRO\r\n            this.calcularInventarioOptimo() //Primer paso: calculamos ym\r\n            this.calcularCostoInventarioMenorIgual() //TCU1\r\n            this.calcularCostoInventarioMayor() //TCU2\r\n            \r\n            setTimeout(() => {\r\n                this.calcularCostoInventario() //TCL\r\n                this.calcularQ() //Q\r\n                this.tamañoPedido() //loteOptimo o y*   \r\n            }, 1);\r\n\r\n            this.setState({mostrarResultados: true})\r\n            this.setState({incompleto: false})\r\n\r\n        }else{\r\n            this.setState({incompleto:true}) //PONGO A INCOMPLETO EN TRUE Y MUESTRO LA ALERTA DE COMPLETAR CAMPOS\r\n        }\r\n        \r\n        \r\n                 \r\n    }\r\n\r\n    render() { \r\n        let {demanda, costoDePreparacion, costoDeAlmacenamiento,unidadesDemanda, loteOptimo, unidadesAlmacenamiento, incompleto} = this.state;\r\n        let {TCL, mostrarResultados, tiempoDeEntrega, puntoDeReorden} = this.state;\r\n \r\n        \r\n        return (\r\n            <Container fluid className=\"App\"> \r\n            <Row>\r\n              <Col xs={12} md={8} className=\"my-4 mx-auto\">\r\n                <Jumbotron>\r\n                    <Col>\r\n                        <h2>Modelo CEP Discontinuidades de Precio</h2><br></br>                   \r\n                    </Col>\r\n                    \r\n                    <Col> \r\n                        <InputGroup className=\"mt-3\" id={\"demanda\"} key={\"demanda\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"D\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-demanda\"\r\n                            name={\"demanda\"}\r\n                            value={demanda}\r\n                            placeholder=\"Ingresar la demanda\"\r\n                            aria-label=\"Demanda\"\r\n                            aria-describedby=\"demanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            <InputGroupAddon className=\"input-unidades\" addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-unidadesDemanda\"\r\n                            name={\"unidadesDemanda\"}\r\n                            placeholder=\"Ingresar las unidades de demanda\"\r\n                            aria-label=\"UnidadDemanda\"\r\n                            aria-describedby=\"unidadDemanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\" id={\"costoDePreparacion\"} key={\"costoDePreparacion\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"K\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDePreparacion\"}\r\n                            value={costoDePreparacion}\r\n                            placeholder=\"Ingresar el costo por pedido\"\r\n                            aria-label=\"costoDePreparacion\"\r\n                            aria-describedby=\"costoDePreparacion\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            \r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\" id={\"costoDeAlmacenamiento\"} key={\"costoDeAlmacenamiento\"}>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"h\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText >{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDeAlmacenamiento\"}\r\n                            value={costoDeAlmacenamiento}\r\n                            placeholder=\"Ingresar el costo de almacenamiento\"\r\n                            aria-label=\"costoDePreparacion\"\r\n                            aria-describedby=\"costoDePreparacion\"\r\n                            onChange={this.handleInputChange}\r\n                            />  \r\n                            \r\n                            <InputGroupAddon className=\"unidadesAlmacenamiento\" addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"\"\r\n                            name={\"unidadesAlmacenamiento\"}\r\n                            placeholder=\"Ingresar las unidades de tiempo\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        \r\n                        </InputGroup>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"L\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"tiempoDeEntrega\"}\r\n                            value={tiempoDeEntrega}\r\n                            placeholder=\"Ingresar el tiempo de entrega.\"\r\n                            aria-label=\"tiempoDeEntrega\"\r\n                            aria-describedby=\"tiempoDeEntrega\"\r\n                            onChange={this.handleInputChange}\r\n                            />            \r\n                        </InputGroup>\r\n                    </Col>\r\n                    \r\n                    <Col>\r\n                    <InputGroup className=\"mt-3\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText name=\"precioC1\" id=\"precioC1\"><b>{\"c1\"}</b></InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText>{\"$\"}</InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Input\r\n                        name={\"precioC1\"}\r\n                        placeholder=\"Ingresar el precio 1\"\r\n                        aria-label=\"precioC1\"\r\n                        aria-describedby=\"precioC1\"\r\n                        onChange={this.handleInputChange}\r\n                        />\r\n                    </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"c2\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"precioC2\"}\r\n                            placeholder=\"Ingresar el precio 2\"\r\n                            aria-label=\"precioC2\"\r\n                            aria-describedby=\"precioC2\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"q\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"limite\"}\r\n                            placeholder=\"Ingresar el limite q\"\r\n                            aria-label=\"limite\"\r\n                            aria-describedby=\"limite\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                                        \r\n                    {mostrarResultados && (    //Si mostrarResultados esta en true que quiere decir que apreto el boton y que todos los campos estan completos\r\n                                                          \r\n                    <Col>\r\n                        <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333', marginTop:10}}>\r\n                            <CardText>\r\n                                <h6 style={{display:'inline'}}>El lote optimo es:</h6> <h5 style={{display:'inline'}}><b>{Number(loteOptimo).toFixed(2)}</b></h5><br></br>\r\n                                <h6 style={{display:'inline'}}>El costo total esperado es:</h6> <h5 style={{display:'inline'}}><b>${Number(TCL).toFixed(2)}</b></h5><br></br>\r\n                                <Col>\r\n                                    <Card body inverse color=\"primary\" style={{marginTop:10, padding: '5px 0 0 0'}}>\r\n                                        <CardText>\r\n                                        <h5>Pedir {Number(loteOptimo).toFixed(2)} {unidadesDemanda} cuando el inventario baje de {Number(puntoDeReorden).toFixed(2)} {unidadesDemanda}</h5>\r\n                                        </CardText>\r\n                                    </Card>   \r\n                                </Col>\r\n                            </CardText>\r\n                        </Card>   \r\n                    </Col>)}\r\n                           \r\n                    {incompleto && (\r\n                    <Card className=\"card-incompleto\" body inverse color=\"danger\" style={{padding: '0 0 0 0', marginTop:10}}>\r\n                        <CardText>Complete más campos para poder continuar y luego presione calcular.</CardText>\r\n                    </Card>)}\r\n                    \r\n                    \r\n                    <Row className=\"btn-volver justify-content-center\">\r\n                        <Link to='./'><Button>Volver</Button></Link>\r\n                        <Button className=\"btn-Calcular\" color=\"success\" onClick={this.mostrarResultados}>Calcular</Button>\r\n                    </Row>\r\n                    \r\n                </Jumbotron>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n\r\nexport default modelStockSimple;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText, UncontrolledPopover} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\n\r\n\r\n\r\nconst info = () => {\r\n    return(\r\n    <Container fluid className=\"App\">\r\n      <Row>\r\n        <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n          <Jumbotron>\r\n            <Row className=\"justify-content-center\">\r\n                <div>\r\n                    <h2>Modelo Discontinuidad del Precio</h2><br></br>\r\n                </div>\r\n            </Row>\r\n            \r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\" >\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Hipotesis</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li>Tasa constante de demanda con el surtido instantáneo del pedido y sin faltante</li>\r\n                        <li>Una vez pedido el stock se actualiza automaticamente.</li>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Variables</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li><b>D: </b>Demanda</li>\r\n                        <li><b>K: </b>Costo de preparacion</li>\r\n                        <li><b>c1: </b>Costo de almacenamiento</li>\r\n                        <li><b>b: </b>Costo por compra por unidad</li>\r\n                        \r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row className=\"justify-content-left\">\r\n                <Card body outline color=\"secondary\">\r\n                    <CardTitle><b>Bibliografia</b></CardTitle>\r\n                    <CardText>TAHA HAMDY A., “Investigación de Operaciones”, EDITORIAL Pearson Prentice Hall, 2004</CardText>\r\n                </Card>\r\n            </Row>\r\n            \r\n            \r\n            <Row className=\"btn-volver justify-content-center\">\r\n                <Link to='/StockProblems'><Button>Volver</Button></Link>\r\n            </Row>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n    };\r\nexport default info;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\n\r\n\r\n\r\nclass ModeloSimpleSinAgotamiento extends React.Component{\r\n    constructor (props){\r\n        super(props)\r\n        this.state={\r\n            demanda: null, //D\r\n            CostoDeUnaOrden: null, //K\r\n            costoDeAlmacenamiento: null,//c1\r\n            costoDeAdquisicion: null, //b\r\n            StockDeProteccion:null,// c2\r\n            unidadesAlmacenamiento: null,\r\n            unidadesDemanda:null,\r\n            loteOptimo:null, //q\r\n            tiempoEntrePedidos: null, //t0\r\n            mostrarResultados: false,\r\n            inputUpdated: false,\r\n            incompleto: false,\r\n            CTE: null,\r\n            T:1,\r\n            CostoDeEscasez: null,\r\n            stockAlmacenado:null,\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){ //Para comparar mi estado actual con el estado anterior. Verificamos si se actualizo algun campo de los input.\r\n        if(this.state.inputUpdated){\r\n            this.setState({inputUpdated:false})\r\n            this.controlarCambio();\r\n            \r\n        } \r\n    }\r\n\r\n    handleInputChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n            inputUpdated: true,\r\n        })\r\n    }\r\n\r\n    //SI HUBO CAMBIOS QUE DESAPAREZCA LA VENTANA QUE MUESTRA LOS RESULTADOS\r\n    controlarCambio = () => { \r\n        this.setState({mostrarResultados:false})\r\n    }\r\n    \r\n\r\n    //q0\r\n    calcularTamañoDelLote(){\r\n        let {demanda, CostoDeUnaOrden,T, CostoUnitarioDeAlmacenamiento, CostoDeEscasez} = this.state;\r\n        let primerRaiz, segundaRaiz, loteOptimo\r\n        primerRaiz = (Math.sqrt((2*Number(CostoDeUnaOrden)*Number(demanda))/(Number(CostoUnitarioDeAlmacenamiento)*Number(T))))\r\n        segundaRaiz = ( Math.sqrt((Number(CostoUnitarioDeAlmacenamiento)+Number(CostoDeEscasez))/(Number(CostoDeEscasez))) );\r\n        loteOptimo = (primerRaiz * segundaRaiz)\r\n        \r\n        if (loteOptimo>demanda){ //Si el q0 calculado es mas grande que la demanda entonces como lote optimo va la demanda\r\n            this.setState({loteOptimo: demanda})\r\n        }else{\r\n            this.setState({loteOptimo})\r\n        }\r\n    }\r\n\r\n    //CALCULAR t0\r\n    calcularIntervaloDeUnCiclo()\r\n    {\r\n        let {demanda, CostoDeUnaOrden, CostoUnitarioDeAlmacenamiento,T, CostoDeEscasez} = this.state;\r\n        let primerRaiz, segundaRaiz, loteOptimo\r\n        primerRaiz = (Math.sqrt((2*Number(CostoDeUnaOrden)*Number(T))/(Number(demanda)*Number(CostoUnitarioDeAlmacenamiento))))\r\n        segundaRaiz = ( Math.sqrt((Number(CostoUnitarioDeAlmacenamiento)+Number(CostoDeEscasez))/(Number(CostoDeEscasez))) );\r\n        this.setState({tiempoEntrePedidos: (primerRaiz+segundaRaiz) })\r\n    }\r\n\r\n    //CALCULAR CTE\r\n    calcularCostoTotalEsperado(){\r\n        let {costoDeAdquisicion,demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,CostoDeEscasez,T} = this.state;\r\n        let bD, raiz2TDKC1, raizc1c2\r\n        bD = (Number(costoDeAdquisicion)*Number(demanda))\r\n        raiz2TDKC1 = (Math.sqrt(2*Number(CostoDeUnaOrden)*Number(demanda)*Number(T)*Number(CostoUnitarioDeAlmacenamiento)))\r\n        raizc1c2 = ( Math.sqrt( (Number(CostoDeEscasez))/(Number(CostoUnitarioDeAlmacenamiento)+(Number(CostoDeEscasez))) ) )\r\n        this.setState({CTE: (bD + (raiz2TDKC1*raizc1c2)) }) //CTEo\r\n    }\r\n\r\n    //CALCULAR s\r\n    calcularStockRealAlmacenado(){\r\n        let {demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,CostoDeEscasez,T} = this.state;\r\n        let primerRaiz, segundaRaiz\r\n        primerRaiz = (Math.sqrt((2*Number(CostoDeUnaOrden)*Number(demanda))/(Number(CostoUnitarioDeAlmacenamiento)*Number(T))))\r\n        segundaRaiz = ( Math.sqrt((Number(CostoDeEscasez)) / (Number(CostoDeEscasez)+Number(CostoUnitarioDeAlmacenamiento))) )\r\n                \r\n        this.setState({stockAlmacenado: (primerRaiz*segundaRaiz) })\r\n    }\r\n    \r\n    calcularStockDeReorden(){\r\n        let {LeadTime,demanda,StockDeProteccion} = this.state;\r\n      return((LeadTime*demanda)+StockDeProteccion)//sp\r\n    }\r\n\r\n    /* //FUNCIONES QUE NO ESTAMOS OCUPANDO\r\n    calcularCostoTotalEsperadoConQ(){\r\n        let {costoDeAdquisicion,demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,StockDeProteccion,T} = this.state;\r\n        let q = this.calcularTamañoDelLote();\r\n        return((costoDeAdquisicion*demanda)+(q*CostoUnitarioDeAlmacenamiento*T)/2+CostoDeUnaOrden/(demanda/q)*StockDeProteccion*CostoUnitarioDeAlmacenamiento*T)//CTEo\r\n    }\r\n\r\n    calcularIntervaloDeUnCicloSinRaiz()\r\n    {\r\n        let {demanda, T} = this.state;\r\n        return ((this.calcularTamañoDelLote()*T)/(demanda)); //to\r\n    }\r\n\r\n    calcularTamañoDelLoteSinRaiz(){\r\n        let {demanda, T, } = this.state;\r\n        let to = this.calcularIntervaloDeUnCiclo()\r\n        return ((demanda*to)/T); //q\r\n    }\r\n    */\r\n\r\n    mostrarResultados = () => {\r\n        let {demanda, costoDeAdquisicion, CostoUnitarioDeAlmacenamiento, CostoDeUnaOrden,CostoDeEscasez} = this.state;\r\n        let combinacion1 = [demanda,CostoDeUnaOrden,CostoUnitarioDeAlmacenamiento,costoDeAdquisicion,CostoDeEscasez] //Cargamos un arreglo\r\n        let control1 = combinacion1.every(caso => caso); //Si devuelve true es porque todos los elementos del arreglo estan cargados \r\n        \r\n        if (control1){ //SI TODOS LOS CAMPOS ESTAN CARGADOS ENTONCES CALCULO TODO Y MUESTRO\r\n\r\n            this.calcularTamañoDelLote(); //Calculo q0\r\n            this.calcularIntervaloDeUnCiclo(); //Calculo t0\r\n            this.calcularStockRealAlmacenado(); //Calculo s\r\n            \r\n            setTimeout(() => { //Luego de calcular lo anterior, le doy un tiempo para que calcule el CTE\r\n                this.calcularCostoTotalEsperado();\r\n            }, 1);\r\n\r\n            this.setState({mostrarResultados: true})\r\n            this.setState({incompleto: false})\r\n\r\n        }else{\r\n            this.setState({incompleto:true}) //PONGO A INCOMPLETO EN TRUE Y MUESTRO LA ALERTA DE COMPLETAR CAMPOS\r\n        }\r\n                      \r\n    }\r\n\r\n    render() { \r\n        let {demanda,CTE,loteOptimo,tiempoEntrePedidos,CostoDeUnaOrden,costoDeAdquisicion, CostoDeEscasez} = this.state;\r\n        let {incompleto,mostrarResultados,CostoUnitarioDeAlmacenamiento,unidadesDemanda,unidadesAlmacenamiento, stockAlmacenado} = this.state;\r\n        \r\n \r\n        \r\n        return (\r\n            <Container fluid className=\"App\"> \r\n            <Row>\r\n                <h1>HOLA MAJO</h1>\r\n              <Col xs={12} md={8} className=\"my-4 mx-auto\">\r\n                <Jumbotron>\r\n                    <Col>\r\n                        <h2>Modelo con agotamiento</h2><br></br>                   \r\n                    </Col>\r\n                    \r\n                    <Col> \r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"D\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-demanda\"\r\n                            name={\"demanda\"}\r\n                            value={demanda}\r\n                            placeholder=\"Ingresar la demanda\"\r\n                            aria-label=\"Demanda\"\r\n                            aria-describedby=\"demanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            <InputGroupAddon className=\"input-unidades\" addonType=\"prepend\">\r\n                            <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"input-unidadesDemanda\"\r\n                            name={\"unidadesDemanda\"}\r\n                            placeholder=\"Ingresar las unidades de demanda\"\r\n                            aria-label=\"UnidadDemanda\"\r\n                            aria-describedby=\"unidadDemanda\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"K\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoDeUnaOrden\"}\r\n                            value={CostoDeUnaOrden}\r\n                            placeholder=\"Ingresar el costo de preparacion/producción\"\r\n                            aria-label=\"CostoDeUnaOrden\"\r\n                            aria-describedby=\"CostoDeUnaOrden\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"c1\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoUnitarioDeAlmacenamiento\"}\r\n                            value={CostoUnitarioDeAlmacenamiento}\r\n                            placeholder=\"Ingresar el costo de almacenamiento\"\r\n                            aria-label=\"CostoUnitarioDeAlmacenamiento\"\r\n                            aria-describedby=\"CostoUnitarioDeAlmacenamiento\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                            \r\n                            <InputGroupAddon className=\"unidadesAlmacenamiento\" addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"Unidades\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            className=\"\"\r\n                            name={\"unidadesAlmacenamiento\"}\r\n                            placeholder=\"Ingresar las unidades de tiempo\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"b\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"costoDeAdquisicion\"}\r\n                            value={costoDeAdquisicion}\r\n                            placeholder=\"Ingresar el costo del producto x unidad.\"\r\n                            aria-label=\"costoDeAdquisicion\"\r\n                            aria-describedby=\"costoDeAdquisicion\"\r\n                            onChange={this.handleInputChange}\r\n                            />                        \r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText><b>{\"c2\"}</b></InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <InputGroupAddon addonType=\"prepend\">\r\n                                <InputGroupText>{\"$\"}</InputGroupText>\r\n                            </InputGroupAddon>\r\n                            <Input\r\n                            name={\"CostoDeEscasez\"}\r\n                            value={CostoDeEscasez}\r\n                            placeholder=\"Ingresar stock de proteccion.\"\r\n                            aria-label=\"CostoDeEscasez\"\r\n                            aria-describedby=\"CostoDeEscasez\"\r\n                            onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                                        \r\n                    {mostrarResultados && (    //Si mostrarResultados esta en true que quiere decir que apreto el boton y que todos los campos estan completos\r\n                                                          \r\n                    <Col>\r\n                        <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333', marginTop:10}}>\r\n                            <CardText>\r\n                                <h6 style={{display:'inline'}}>El lote optimo es:</h6> <h5 style={{display:'inline'}}><b>{Number(loteOptimo).toFixed(2)}</b></h5><br></br>\r\n                                <h6 style={{display:'inline'}}>El tiempo entre pedidos es:</h6> <h5 style={{display:'inline'}}><b>{Number(tiempoEntrePedidos).toFixed(2)}</b></h5><br></br>\r\n                                <h6 style={{display:'inline'}}>La cantidad de stock almacenado es:</h6> <h5 style={{display:'inline'}}><b>{Number(stockAlmacenado).toFixed(2)} {unidadesDemanda}</b></h5><br></br>\r\n                                <h6 style={{display:'inline'}}>El costo total esperado es:</h6> <h5 style={{display:'inline'}}><b>${Number(CTE).toFixed(2)}</b></h5><br></br>\r\n                                <Col>\r\n                                    <Card body inverse color=\"primary\" style={{marginTop:10, padding: '5px 0 0 0'}}>\r\n                                        <CardText>\r\n                                        <h5>Pedir {Number(loteOptimo).toFixed(2)} {unidadesDemanda} cada {Number(tiempoEntrePedidos).toFixed(2)} {unidadesAlmacenamiento}</h5>\r\n                                        </CardText>\r\n                                    </Card>   \r\n                                </Col>\r\n                            </CardText>\r\n                        </Card>   \r\n                    </Col>)}\r\n                           \r\n                    {incompleto && (\r\n                    <Card className=\"card-incompleto\" body inverse color=\"danger\" style={{padding: '0 0 0 0', marginTop:10}}>\r\n                        <CardText>Complete más campos para poder continuar y luego presione calcular.</CardText>\r\n                    </Card>)}\r\n                    \r\n                    \r\n                    <Row className=\"btn-volver justify-content-center\">\r\n                        <Link to='./'><Button>Volver</Button></Link>\r\n                        <Button className=\"btn-Calcular\" color=\"success\" onClick={this.mostrarResultados}>Calcular</Button>\r\n                    </Row>\r\n                    \r\n                </Jumbotron>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n\r\nexport default ModeloSimpleSinAgotamiento;","import React from \"react\";\r\nimport { ButtonGroup, Button, Container, Row, Col, Card, CardBody, CardHeader, CardTitle, Jumbotron, Dropdown, DropdownItem, ButtonDropdown, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {InputGroupText,InputGroup, Input,InputGroupAddon,PopoverBody, CardText, UncontrolledPopover} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport '../index.css'\r\nimport { Variable } from \"javascript-lp-solver/src/expressions\";\r\nimport MathJax from \"react-mathjax\"\r\n\r\n\r\n\r\nconst infoModeloSimpleSinAgotamiento = () => {\r\n    return(\r\n    <Container fluid className=\"App\">\r\n      <Row>\r\n          <h1>HOLA MAJO</h1>\r\n        <Col xs={12} md={6} className=\"mx-auto my-5\">\r\n          <Jumbotron>\r\n            <Row className=\"justify-content-center\">\r\n                <div>\r\n                    <h2>Demanda constante con agotamiento o simple con escasez</h2>\r\n                </div>\r\n            </Row>\r\n            \r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\" >\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Hipotesis</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li>Tasa constante de demanda con el surtido instantáneo del pedido y sin faltante</li>\r\n                        <li>Una vez pedido el stock se actualiza automaticamente.</li>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                <Row className=\"justify-content-center\">\r\n                        <h5><b>Formulas</b></h5>\r\n                </Row>\r\n                        \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Preparacion = \\\\frac{D}{q}*K\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Del Producto = bi*D\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total De Almacenamiento = \\\\frac{1}{2}*q*T*Ci\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Del Dinero Inmovilizado = P*bi\"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"Costo Total Esperado = \\\\frac{D}{q}*K + b*K + \\\\frac{1}{2}*q*T*Ci + P*bi\"} />\r\n                    </div>\r\n                </MathJax.Provider>    \r\n                <MathJax.Provider>\r\n                    <div>\r\n                        <MathJax.Node formula={\"q_{0i} = \\\\sqrt{\\\\frac{2*K*D}{T*(P*bi*Ci)}}   \"} />\r\n                    </div>\r\n                </MathJax.Provider>\r\n                </Card>\r\n            </Row>\r\n            <Row style={{marginBottom:10}}>\r\n                <Card body outline color=\"secondary\">\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5><b>Variables</b></h5>\r\n                    </Row>\r\n                    <ul className='lista'>\r\n                        <li><b>D: </b>Demanda</li>\r\n                        <li><b>K: </b>Costo de preparacion</li>\r\n                        <li><b>c1: </b>Costo de almacenamiento</li>\r\n                        <li><b>P: porcentaje de interés que se produciría con el dinero inmovilizado</b></li>\r\n                        <li><b>C’i: Costo efectivo de almacenamient</b></li>\r\n                        <li><b>bi: Costo  del i-esimoproducto</b></li>\r\n                    </ul>\r\n                </Card>\r\n            </Row>\r\n            <Row className=\"justify-content-left\">\r\n                <Card body outline color=\"secondary\">\r\n                    <CardTitle><b>Bibliografia</b></CardTitle>\r\n                    <CardText>Claudio L. R. Sturla</CardText>\r\n                </Card>\r\n            </Row>\r\n            \r\n            \r\n            <Row className=\"btn-volver justify-content-center\">\r\n                <Link to='/StockProblems'><Button>Volver</Button></Link>\r\n            </Row>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n    };\r\nexport default infoModeloSimpleSinAgotamiento;","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport InSteps from \"./components/LinealProgramming/InSteps\";\r\nimport NoLinealProgramming from \"./components/NoLinealProgramming\";\r\nimport StockProblems from \"./components/StockProblems\";\r\nimport LinealProgramming from './components/LinealProgramming'\r\nimport Inicio from \"./components/Inicio\";\r\nimport SinglePage from \"./components/LinealProgramming/SinglePage\";\r\n\r\nimport CantidadEconomicaPedido from \"./components/StockProblems/CantidadEconomicaPedido\";\r\nimport infoCantidadEconomicaPedido from \"./components/StockProblems/CantidadEconomicaPedido/info.js\";\r\n\r\n\r\n\r\nimport ModeloWilson from \"./components/StockProblems/ModeloWilson\";\r\nimport infoModeloWilson from \"./components/StockProblems/ModeloWilson/info.js\";\r\n\r\nimport ModeloStockProteccion from \"./components/StockProblems/ModeloStockProteccion\";\r\nimport infoModeloStockProteccion from \"./components/StockProblems/ModeloStockProteccion/info.js\";\r\n\r\nimport ModeloAgotamientoAdmitido from \"./components/StockProblems/ModeloAgotamientoAdmitido\";\r\nimport infoModeloAgotamientoAdmitido from \"./components/StockProblems/ModeloAgotamientoAdmitido/info.js\";\r\n\r\nimport ModeloTriangular from \"./components/StockProblems/ModeloTriangular\";\r\nimport infoModeloTriangular from \"./components/StockProblems/ModeloTriangular/info.js\";\r\n\r\n\r\n\r\nimport ModelStockDiscontinuidadDePrecio from \"./components/StockProblems/ModelStockDiscontinuidadDePrecio\";\r\nimport infoModelStockDiscontinuidadDePrecio from \"./components/StockProblems/ModelStockDiscontinuidadDePrecio/info.js\";\r\n\r\nimport ModeloSimpleSinAgotamiento from \"./components/StockProblems/modeloSimpleSinAgotamiento/index.js\";\r\nimport infoModeloSimpleSinAgotamiento from \"./components/StockProblems/modeloSimpleSinAgotamiento/info.js\";\r\n\r\n\r\n\r\n\r\n\r\nconst NoLinealProgrammingPage = () => <NoLinealProgramming />;\r\n\r\nconst Index = () => <Inicio/>;\r\n\r\nconst App = () => \r\n    <Switch>\r\n      <Route exact path=\"/home\" component={Index} />\r\n      <Route exact path=\"/optimizer-pl-io/\" component={Index} />\r\n      <Route exact path=\"/LinealProgramming\" component={LinealProgramming} />\r\n      <Route exact path=\"/LinealProgramming/InSteps\" component={InSteps} />\r\n      <Route exact path=\"/LinealProgramming/SinglePage\" component={SinglePage} />\r\n      <Route exact path=\"/NoLinealProgramming\" component={NoLinealProgrammingPage} />\r\n      <Route exact path=\"/StockProblems\" component={StockProblems} />\r\n      <Route exact path=\"/StockProblems/CantidadEconomicaPedido\" component={CantidadEconomicaPedido} />\r\n      <Route exact path=\"/StockProblems/CantidadEconomicaPedido/info.js\" component={infoCantidadEconomicaPedido} />\r\n      \r\n\r\n      <Route exact path=\"/StockProblems/ModeloWilson\" component={ModeloWilson} />\r\n      <Route exact path=\"/StockProblems/ModeloWilson/info.js\" component={infoModeloWilson} />\r\n\r\n      <Route exact path=\"/StockProblems/ModeloStockProteccion\" component={ModeloStockProteccion} />\r\n      <Route exact path=\"/StockProblems/ModeloStockProteccion/info.js\" component={infoModeloStockProteccion} />\r\n\r\n      <Route exact path=\"/StockProblems/ModeloAgotamientoAdmitido\" component={ModeloAgotamientoAdmitido} />\r\n      <Route exact path=\"/StockProblems/ModeloAgotamientoAdmitido/info.js\" component={infoModeloAgotamientoAdmitido} />\r\n\r\n      <Route exact path=\"/StockProblems/ModeloTriangular\" component={ModeloTriangular} />\r\n      <Route exact path=\"/StockProblems/ModeloTriangular/info.js\" component={infoModeloTriangular} />\r\n      \r\n      <Route exact path=\"/StockProblems/ModelStockDiscontinuidadDePrecio\" component={ModelStockDiscontinuidadDePrecio} />\r\n      <Route exact path=\"/StockProblems/ModelStockDiscontinuidadDePrecio/info.js\" component={infoModelStockDiscontinuidadDePrecio} />\r\n\r\n      <Route exact path=\"/StockProblems/StockProblems/modeloSimpleSinAgotamiento/info.js\" component={infoModeloSimpleSinAgotamiento} />\r\n      <Route exact path=\"/StockProblems/modeloSimpleSinAgotamiento\" component={ModeloSimpleSinAgotamiento} />\r\n      \r\n      \r\n      <Redirect to=\"/home\" />\r\n    </Switch>;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter} from \"react-router-dom\";\r\nimport './App.css';\r\nimport './index.css';\r\nimport 'react-vis/dist/style.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}